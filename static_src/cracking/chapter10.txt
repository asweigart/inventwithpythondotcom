


<div><a target="_blank" href="https://www.amazon.com/gp/product/1593278225/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1593278225&linkCode=as2&tag=playwithpyth-20&linkId=bf3b22819f0886d277e88b8a653b81ad">
<img src="images/cover_crackingcodes_thumb.png" /><br />Buy the print or ebook online.</a></div>
<div><a href="chapter9.html">Previous Chapter - Programming a Program to Test Your Program</a> | <a href="chapter11.html">Next Chapter - Detecting English Programmatically</a></div>
<div id="calibre_link-345" class="calibre">
<h2 class="h2a1" id="calibre_link-58"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-926" class="calibre1"></span><span class="big">10</span><br class="calibre15" />ENCRYPTING AND DECRYPTING FILES</h2>
<p class="epigraph"><em class="calibre7">“Why do security police grab people and torture them? To get their information. And hard disks put up no resistance to torture. You need to give the hard disk a way to resist. That’s cryptography.”<br class="calibre9" />&mdash;Patrick Ball, Human Rights Data Analysis Group</em></p>
<div class="image"><img src="images/00078.jpeg" alt="Images" class="calibre4" /></div>
<p class="noindent">In previous chapters, our programs have only worked on small messages that we type directly into the source code as string values. The cipher program we’ll make in this chapter will allow you to encrypt and decrypt entire files, which can be millions of characters in size.</p>
<div class="sidebar">
<p class="sidebart"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-234"></span><strong class="calibre5">TOPICS COVERED IN THIS CHAPTER</strong></p>
<ul class="calibre10">
<li class="calibre11"><p class="noindent">The <span class="literal">open()</span> function</p></li>
<li class="calibre11"><p class="noindent">Reading and writing files</p></li>
<li class="calibre11"><p class="noindent">The <span class="literal">write()</span>, <span class="literal">close()</span>, and <span class="literal">read()</span> file object methods</p></li>
<li class="calibre11"><p class="noindent">The <span class="literal">os.path.exists()</span> function</p></li>
<li class="calibre11"><p class="noindent">The <span class="literal">upper()</span>, <span class="literal">lower()</span>, and <span class="literal">title()</span> string methods</p></li>
<li class="calibre11"><p class="noindent">The <span class="literal">startswith()</span> and <span class="literal">endswith()</span> string methods</p></li>
<li class="calibre11"><p class="noindent">The <span class="literal">time</span> module and <span class="literal">time.time()</span> function</p></li>
</ul>
</div>
<h3 class="h1" id="calibre_link-578"><strong class="calibre3">Plain Text Files</strong></h3>
<p class="noindent">The transposition file cipher program encrypts and decrypts plain (unformatted) text files. These are the kind of files that only have text data and usually have the <em class="calibre7">.txt</em> file extension. You can write your own text files with programs such as Notepad on Windows, TextEdit on macOS, and gedit on Linux. (Word processing programs can produce plain text files as well, but keep in mind that they won’t save any font, size, color, or other formatting.) You can even use IDLE’s file editor by saving the files with a <em class="calibre7">.txt</em> extension instead of the usual <em class="calibre7">.py</em> extension.</p>
<p class="indent">For some samples, you can download text files from <a href="https://www.nostarch.com/crackingcodes/" class="calibre8"><em class="calibre7">https://www.nostarch.com/crackingcodes/</em></a>. These sample text files are of books that are now in the public domain and legal to download and use. For example, Mary Shelley’s classic novel <em class="calibre7">Frankenstein</em> has more than 78,000 words in its text file! To type this book into an encryption program would take a lot of time, but by using the downloaded file, the program can do the encryption in a couple of seconds.</p>
<h3 class="h1" id="calibre_link-579"><strong class="calibre3">Source Code for the Transposition File Cipher Program</strong></h3>
<p class="noindent">As with the transposition cipher&ndash;testing program, the transposition file cipher program imports the <em class="calibre7">transpositionEncrypt.py</em> and <em class="calibre7">transpositionDecrypt.py</em> files so it can call the <span class="literal">encryptMessage()</span> and <span class="literal">decryptMessage()</span> functions. As a result, you don’t have to retype the code for these functions in the new program.</p>
<p class="indent">Open a new file editor window by selecting <strong class="calibre5">File</strong><span class="ent">▸</span><strong class="calibre5">New File</strong>. Enter the following code into the file editor and save it as <em class="calibre7">transpositionFileCipher.py</em>. Then download <em class="calibre7">frankenstein.txt</em> from <a href="https://www.nostarch.com/crackingcodes/" class="calibre8"><em class="calibre7">https://www.nostarch.com/crackingcodes/</em></a> and place this file in the same folder as the <em class="calibre7">transpositionFileCipher.py</em> file. Press F5 to run the program.</p>
<span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-927"></span>
<p class="noindentz"><em class="calibre7">transposition<br class="calibre9" />FileCipher.py</em></p>
<p class="programs1">&nbsp;1. # Transposition Cipher Encrypt/Decrypt File<br class="calibre9" />&nbsp;2. # https://www.nostarch.com/crackingcodes/ (BSD Licensed)<br class="calibre9" />&nbsp;3.<br class="calibre9" />&nbsp;4. import time, os, sys, transpositionEncrypt, transpositionDecrypt<br class="calibre9" />&nbsp;5.<br class="calibre9" />&nbsp;6. def main():<br class="calibre9" />&nbsp;7.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputFilename = 'frankenstein.txt'<br class="calibre9" />&nbsp;8.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# BE CAREFUL! If a file with the outputFilename name already exists,<br class="calibre9" />&nbsp;9.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# this program will overwrite that file:<br class="calibre9" />10.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputFilename = 'frankenstein.encrypted.txt'<br class="calibre9" />11.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myKey = 10<br class="calibre9" />12.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myMode = 'encrypt' # Set to 'encrypt' or 'decrypt'.<br class="calibre9" />13.<br class="calibre9" />14.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# If the input file does not exist, the program terminates early:<br class="calibre9" />15.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not os.path.exists(inputFilename):<br class="calibre9" />16.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('The file %s does not exist. Quitting...' % (inputFilename))<br class="calibre9" />17.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sys.exit()<br class="calibre9" />18.<br class="calibre9" />19.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# If the output file already exists, give the user a chance to quit:<br class="calibre9" />20.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if os.path.exists(outputFilename):<br class="calibre9" />21.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('This will overwrite the file %s. (C)ontinue or (Q)uit?' %<br class="calibre9" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(outputFilename))<br class="calibre9" />22.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response = input('&gt; ')<br class="calibre9" />23.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not response.lower().startswith('c'):<br class="calibre9" />24.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sys.exit()<br class="calibre9" />25.<br class="calibre9" />26.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Read in the message from the input file:<br class="calibre9" />27.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileObj = open(inputFilename)<br class="calibre9" />28.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;content = fileObj.read()<br class="calibre9" />29.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileObj.close()<br class="calibre9" />30.<br class="calibre9" />31.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('%sing...' % (myMode.title()))<br class="calibre9" />32.<br class="calibre9" />33.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Measure how long the encryption/decryption takes:<br class="calibre9" />34.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startTime = time.time()<br class="calibre9" />35.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if myMode == 'encrypt':<br class="calibre9" />36.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translated = transpositionEncrypt.encryptMessage(myKey, content)<br class="calibre9" />37.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elif myMode == 'decrypt':<br class="calibre9" />38.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translated = transpositionDecrypt.decryptMessage(myKey, content)<br class="calibre9" />39.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalTime = round(time.time() - startTime, 2)<br class="calibre9" />40.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('%sion time: %s seconds' % (myMode.title(), totalTime))<br class="calibre9" />41.<br class="calibre9" />42.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Write out the translated message to the output file:<br class="calibre9" />43.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputFileObj = open(outputFilename, 'w')<br class="calibre9" />44.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputFileObj.write(translated)<br class="calibre9" />45.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputFileObj.close()<br class="calibre9" />46.<br class="calibre9" />47.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('Done %sing %s (%s characters).' % (myMode, inputFilename,<br class="calibre9" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len(content)))<br class="calibre9" />48.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('%sed file is %s.' % (myMode.title(), outputFilename))<br class="calibre9" />49.<br class="calibre9" />50.<br class="calibre9" /><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-235"></span>51. # If transpositionCipherFile.py is run (instead of imported as a module),<br class="calibre9" />52. # call the main() function:<br class="calibre9" />53. if __name__ == '__main__':<br class="calibre9" />54.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;main()</p>
<h3 class="h1" id="calibre_link-580"><strong class="calibre3">Sample Run of the Transposition File Cipher Program</strong></h3>
<p class="noindent">When you run the <em class="calibre7">transpositionFileCipher.py</em> program, it should produce this output:</p>
<p class="programs1">Encrypting...<br class="calibre9" />Encryption time: 1.21 seconds<br class="calibre9" />Done encrypting frankenstein.txt (441034 characters).<br class="calibre9" />Encrypted file is frankenstein.encrypted.txt.</p>
<p class="indent">A new <em class="calibre7">frankenstein.encrypted.txt</em> file is created in the same folder as <em class="calibre7">transpositionFileCipher.py</em>. When you open this file with IDLE’s file editor, you’ll see the encrypted contents of <em class="calibre7">frankenstein.py</em>. It should look something like this:</p>
<p class="programs1">PtFiyedleo&nbsp;&nbsp;a arnvmt eneeGLchongnes Mmuyedlsu0#uiSHTGA r sy,n t ys<br class="calibre9" />s nuaoGeL<br class="calibre9" />sc7s,<br class="calibre9" />--<span class="codeitalic">snip</span>--</p>
<p class="indent">Once you have an encrypted text, you can send it to someone else to decrypt it. The recipient will also need to have the transposition file cipher program.</p>
<p class="indent">To decrypt the text, make the following changes to the source code (in bold) and run the transposition file cipher program again:</p>
<p class="programs1">&nbsp;7.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputFilename = <span class="codestrong">'frankenstein.encrypted.txt'</span><br class="calibre9" />&nbsp;8.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# BE CAREFUL! If a file with the outputFilename name already exists,<br class="calibre9" />&nbsp;9.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# this program will overwrite that file:<br class="calibre9" />10.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputFilename = <span class="codestrong">'frankenstein.decrypted.txt'</span><br class="calibre9" />11.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myKey = 10<br class="calibre9" />12.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myMode = <span class="codestrong">'decrypt'</span> # Set to 'encrypt' or 'decrypt'.</p>
<p class="indent">This time when you run the program, a new file named <em class="calibre7">frankenstein.decrypted.txt</em> that is identical to the original <em class="calibre7">frankenstein.txt</em> file will appear in the folder.</p>
<h3 class="h1" id="calibre_link-581"><strong class="calibre3">Working with Files</strong></h3>
<p class="noindent">Before we dive into the code for <em class="calibre7">transpositionFileCipher.py</em>, let’s examine how Python works with files. The three steps to reading the contents of a file are opening the file, reading the file content into a variable, and closing the file. Similarly, to write new content in a file, you must open (or create) the file, write the new content, and close the file.</p>
<h4 class="h2" id="calibre_link-582"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-97" class="calibre1"></span><strong class="calibre3"><em class="calibre12">Opening Files</em></strong></h4>
<p class="noindent">Python can open a file to read from or write to using the <span class="literal">open()</span> function. The <span class="literal">open()</span> function’s first parameter is the name of the file to open. If the file is in the same folder as the Python program, you can just use the file’s name, such as <span class="literal">'thetimemachine.txt'</span>. The command to open <em class="calibre7">thetimemachine.txt</em> if it existed in the same folder as your Python program would look like this:</p>
<p class="programs1">fileObj = open('thetimemachine.txt')</p>
<p class="indent">A file object is stored in the <span class="literal">fileObj</span> variable, which will be used to read from or write to the file.</p>
<p class="indent">You can also specify the <em class="calibre7">absolute path</em> of the file, which includes the folders and parent folders that the file is in. For example, <span class="literal">'C:\\Users\\Al\\frankenstein.txt'</span> (on Windows) and <span class="literal">'/Users/Al/frankenstein.txt'</span> (on macOS and Linux) are absolute paths. Remember that on Windows the backslash (<span class="literal">\</span>) must be escaped by typing another backslash before it.</p>
<p class="indent">For example, if you wanted to open the <em class="calibre7">frankenstein.txt</em> file, you would pass the path of the file as a string for the <span class="literal">open()</span> function’s first parameter (and format the absolute path according to your operating system):</p>
<p class="programs1">fileObj = open('C:\\Users\\Al\\frankenstein.txt')</p>
<p class="indent">The file object has several methods for writing to, reading from, and closing the file.</p>
<h4 class="h2" id="calibre_link-583"><strong class="calibre3"><em class="calibre12">Writing to and Closing Files</em></strong></h4>
<p class="noindent">For the encryption program, after reading in the text file’s content, you’ll need to write the encrypted (or decrypted) content to a new file, which you’ll do by using the <span class="literal">write()</span> method.</p>
<p class="indent">To use <span class="literal">write()</span> on a file object, you need to open the file object in write mode, which you do by passing <span class="literal">open()</span> the string <span class="literal">'w'</span> as a second argument. (This second argument is an <em class="calibre7">optional parameter</em> because the <span class="literal">open()</span> function can still be used without passing two arguments.) For example, enter the following line of code into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">fileObj = open('spam.txt', 'w')</span></p>
<p class="indent">This line creates a file named <em class="calibre7">spam.txt</em> in write mode so you can edit it. If a file of the same name exists where the <span class="literal">open()</span> function creates the new file, the old file is overwritten, so be careful when using <span class="literal">open()</span> in write mode.</p>
<p class="indent">With <em class="calibre7">spam.txt</em> now open in write mode, you can write to the file by calling the <span class="literal">write()</span> method on it. The <span class="literal">write()</span> method takes one argument: a string of text to write to the file. Enter the following into the interactive shell to write <span class="literal">'Hello, world!'</span> to <em class="calibre7">spam.txt</em>:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">fileObj.write('Hello, world!')</span><br class="calibre9" />13</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-125"></span>Passing the string <span class="literal">'Hello, world!'</span> to the <span class="literal">write()</span> method writes that string to the <em class="calibre7">spam.txt</em> file and then prints <span class="literal">13</span>, the number of characters in the string written to the file.</p>
<p class="indent">When you’re finished working with a file, you need to tell Python you’re done with the file by calling the <span class="literal">close()</span> method on the file object:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">fileObj.close()</span></p>
<p class="indent">There is also an append mode, which is like write mode except append mode doesn’t overwrite the file. Instead, strings are written to the end of the content already in the file. Although we won’t use it in this program, you can open a file in append mode by passing the string <span class="literal">'a'</span> as the second argument to <span class="literal">open()</span>.</p>
<p class="indent">If you get an <span class="literal">io.UnsupportedOperation: not readable</span> error message when you try calling <span class="literal">write()</span> on a file object, you might not have opened the file in write mode. When you don’t include the <span class="literal">open()</span> function’s optional parameter, it automatically opens the file object in read mode (<span class="literal">'r'</span>) instead, which allows you to use only the <span class="literal">read()</span> method on the file object.</p>
<h4 class="h2" id="calibre_link-584"><strong class="calibre3"><em class="calibre12">Reading from a File</em></strong></h4>
<p class="noindent">The <span class="literal">read()</span> method returns a string containing all the text in the file. To try it out, we’ll read the <em class="calibre7">spam.txt</em> file we created earlier with the <span class="literal">write()</span> method. Run the following code from the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">fileObj = open('spam.txt', 'r')</span><br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">content = fileObj.read()</span><br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">print(content)</span><br class="calibre9" />Hello world!<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">fileObj.close()</span></p>
<p class="indent">The file is opened, and the file object that is created is stored in the <span class="literal">fileObj</span> variable. Once you have the file object, you can read the file using the <span class="literal">read()</span> method and store it in the <span class="literal">content</span> variable, which you then print. When you’re done with the file object, you need to close it with <span class="literal">close()</span>.</p>
<p class="indent">If you get the error message <span class="literal">IOError: [Errno 2] No such file or directory</span>, make sure the file actually is where you think it is and double-check that you typed the filename and folder name correctly. (<em class="calibre7">Directory</em> is another word for <em class="calibre7">folder</em>.)</p>
<p class="indent">We’ll use <span class="literal">open()</span>, <span class="literal">read()</span>, <span class="literal">write()</span>, and <span class="literal">close()</span> on the files that we open to encrypt or decrypt in <em class="calibre7">transpositionFileCipher.py</em>.</p>
<h3 class="h1" id="calibre_link-585"><strong class="calibre3">Setting Up the main() Function</strong></h3>
<p class="noindent">The first part of the <em class="calibre7">transpositionFileCipher.py</em> program should look familiar. Line 4 is an <span class="literal">import</span> statement for the programs <em class="calibre7">transpositionEncrypt.py</em> and <em class="calibre7">transpositionDecrypt.py</em> as well as Python’s <span class="literal">time</span>, <span class="literal">os</span>, and <span class="literal">sys</span> modules. Then we start <span class="literal">main()</span> by setting up some variables to use in the program.</p>
<span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-227"></span>
<p class="programs1">&nbsp;1. # Transposition Cipher Encrypt/Decrypt File<br class="calibre9" />&nbsp;2. # https://www.nostarch.com/crackingcodes/ (BSD Licensed)<br class="calibre9" />&nbsp;3.<br class="calibre9" />&nbsp;4. import time, os, sys, transpositionEncrypt, transpositionDecrypt<br class="calibre9" />&nbsp;5.<br class="calibre9" />&nbsp;6. def main():<br class="calibre9" />&nbsp;7.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputFilename = 'frankenstein.txt'<br class="calibre9" />&nbsp;8.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# BE CAREFUL! If a file with the outputFilename name already exists,<br class="calibre9" />&nbsp;9.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# this program will overwrite that file:<br class="calibre9" />10.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputFilename = 'frankenstein.encrypted.txt'<br class="calibre9" />11.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myKey = 10<br class="calibre9" />12.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myMode = 'encrypt' # Set to 'encrypt' or 'decrypt'.</p>
<p class="indent">The <span class="literal">inputFilename</span> variable holds a string of the file to read, and the encrypted (or decrypted) text is written to the file named in <span class="literal">outputFilename</span>. The transposition cipher uses an integer for a key, which is stored in <span class="literal">myKey</span>. The program expects <span class="literal">myMode</span> to store <span class="literal">'encrypt'</span> or <span class="literal">'decrypt'</span> to tell it to encrypt or decrypt the <span class="literal">inputFilename</span> file. But before we can read from the <span class="literal">inputFilename</span> file, we need to check that it exists using <span class="literal">os.path.exists()</span>.</p>
<h3 class="h1" id="calibre_link-586"><strong class="calibre3">Checking Whether a File Exists</strong></h3>
<p class="noindent">Reading files is always harmless, but you need to be careful when writing to files. Calling the <span class="literal">open()</span> function in write mode on a filename that already exists overwrites the original content. Using the <span class="literal">os.path.exists()</span> function, your programs can check whether or not that file already exists.</p>
<h4 class="h2" id="calibre_link-587"><strong class="calibre3"><em class="calibre12">The os.path.exists() Function</em></strong></h4>
<p class="noindent">The <span class="literal">os.path.exists()</span> function takes a single string argument for a filename or a path to a file and returns <span class="literal">True</span> if the file already exists and <span class="literal">False</span> if it doesn’t. The <span class="literal">os.path.exists()</span> function exists inside the <span class="literal">path</span> module, which exists inside the <span class="literal">os</span> module, so when we import the <span class="literal">os</span> module, the <span class="literal">path</span> module is imported, too.</p>
<p class="indent">Enter the following into the interactive shell:</p>
<p class="programs1">&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; <span class="codestrong">import os</span><br class="calibre9" /><span class="ent">➊</span> &gt;&gt;&gt; <span class="codestrong">os.path.exists('spam.txt')</span><br class="calibre9" />&nbsp;&nbsp;&nbsp;False<br class="calibre9" />&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; <span class="codestrong">os.path.exists('C:\\Windows\\System32\\calc.exe') # Windows</span><br class="calibre9" />&nbsp;&nbsp;&nbsp;True<br class="calibre9" />&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; <span class="codestrong">os.path.exists('/usr/local/bin/idle3') # macOS</span><br class="calibre9" />&nbsp;&nbsp;&nbsp;False<br class="calibre9" />&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; <span class="codestrong">os.path.exists('/usr/bin/idle3') # Linux</span><br class="calibre9" />&nbsp;&nbsp;&nbsp;False</p>
<p class="indent">In this example, the <span class="literal">os.path.exists()</span> function confirms that the <em class="calibre7">calc.exe</em> file exists in Windows. Of course, you’ll only get these results if you’re running Python on Windows. Remember to escape the backslash in a Windows file path by typing another backslash before it. If you’re using macOS, only <span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-155"></span>the macOS example will return <span class="literal">True</span>, and only the last example will return <span class="literal">True</span> for Linux. If the full file path isn’t given <span class="ent">➊</span>, Python will check the current working directory. For IDLE’s interactive shell, this is the folder that Python is installed in.</p>
<h4 class="h2" id="calibre_link-588"><strong class="calibre3"><em class="calibre12">Checking Whether the Input File Exists with the os.path.exists() Function</em></strong></h4>
<p class="noindent">We use the <span class="literal">os.path.exists()</span> function to check that the filename in <span class="literal">inputFilename</span> exists. Otherwise, we have no file to encrypt or decrypt. We do this in lines 14 to 17:</p>
<p class="programs1">14.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# If the input file does not exist, then the program terminates early:<br class="calibre9" />15.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not os.path.exists(inputFilename):<br class="calibre9" />16.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('The file %s does not exist. Quitting...' % (inputFilename))<br class="calibre9" />17.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sys.exit()</p>
<p class="indent">If the file doesn’t exist, we display a message to the user and then quit the program.</p>
<h3 class="h1" id="calibre_link-589"><strong class="calibre3">Using String Methods to Make User Input More Flexible</strong></h3>
<p class="noindent">Next, the program checks whether a file with the same name as <span class="literal">outputFilename</span> exists, and if so, it asks the user to type <span class="literal">C</span> if they want to continue running the program or <span class="literal">Q</span> to quit the program. Because a user might type various responses, such as <span class="literal">'c'</span>, <span class="literal">'C'</span>, or even the word <span class="literal">'Continue'</span>, we want to make sure the program will accept all of these versions. To do this, we’ll use more string methods.</p>
<h4 class="h2" id="calibre_link-590"><strong class="calibre3"><em class="calibre12">The upper(), lower(), and title() String Methods</em></strong></h4>
<p class="noindent">The <span class="literal">upper()</span> and <span class="literal">lower()</span> string methods will return the string they are called on in all uppercase or all lowercase letters, respectively. Enter the following into the interactive shell to see how the methods work on the same string:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">'Hello'.upper()</span><br class="calibre9" />'HELLO'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'Hello'.lower()</span><br class="calibre9" />'hello'</p>
<p class="indent">Just as the <span class="literal">lower()</span> and <span class="literal">upper()</span> string methods return a string in lowercase or uppercase, the <span class="literal">title()</span> string method returns a string in title case. <em class="calibre7">Title case</em> is where the first character of every word is uppercase and the rest of the characters are lowercase. Enter the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">'hello'.title()</span><br class="calibre9" />'Hello'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'HELLO'.title()</span><br class="calibre9" />'Hello'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'extra! extra! man bites shark!'.title()</span><br class="calibre9" />'Extra! Extra! Man Bites Shark!'</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-215"></span>We’ll use <span class="literal">title()</span> a little later in the program to format messages we output for the user.</p>
<h4 class="h2" id="calibre_link-591"><strong class="calibre3"><em class="calibre12">The startswith() and endswith() String Methods</em></strong></h4>
<p class="noindent">The <span class="literal">startswith()</span> method returns <span class="literal">True</span> if its string argument is found at the beginning of the string. Enter the following into the interactive shell:</p>
<p class="programs1">&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; <span class="codestrong">'hello'.startswith('h')</span><br class="calibre9" />&nbsp;&nbsp;&nbsp;True<br class="calibre9" />&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; <span class="codestrong">'hello'.startswith('H')</span><br class="calibre9" />&nbsp;&nbsp;&nbsp;False<br class="calibre9" />&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; <span class="codestrong">spam = 'Albert'</span><br class="calibre9" /><span class="ent">➊</span> &gt;&gt;&gt; <span class="codestrong">spam.startswith('Al')</span><br class="calibre9" />&nbsp;&nbsp;&nbsp;True</p>
<p class="indent">The <span class="literal">startswith()</span> method is case sensitive and can also be used on strings with multiple characters <span class="ent">➊</span>.</p>
<p class="indent">The <span class="literal">endswith()</span> string method is used to check whether a string value ends with another specified string value. Enter the following into the interactive shell:</p>
<p class="programs1">&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; <span class="codestrong">'Hello world!'.endswith('world!')</span><br class="calibre9" />&nbsp;&nbsp;&nbsp;True<br class="calibre9" /><span class="ent">➋</span> &gt;&gt;&gt; <span class="codestrong">'Hello world!'.endswith('world')</span><br class="calibre9" />&nbsp;&nbsp;&nbsp;False</p>
<p class="indent">The string values must match perfectly. Notice that the lack of the exclamation mark in <span class="literal">'world'</span> <span class="ent">➋</span> causes <span class="literal">endswith()</span> to return <span class="literal">False</span>.</p>
<h4 class="h2" id="calibre_link-592"><strong class="calibre3"><em class="calibre12">Using These String Methods in the Program</em></strong></h4>
<p class="noindent">As noted, we want the program to accept any response that starts with a <em class="calibre7">C</em> regardless of capitalization. This means that we want the file to be overwritten whether the user types <span class="literal">c</span>, <span class="literal">continue</span>, <span class="literal">C</span>, or another string that begins with <em class="calibre7">C</em>. We’ll use the string methods <span class="literal">lower()</span> and <span class="literal">startswith()</span> to make the program more flexible when taking user input:</p>
<p class="programs1">19.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# If the output file already exists, give the user a chance to quit:<br class="calibre9" />20.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if os.path.exists(outputFilename):<br class="calibre9" />21.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('This will overwrite the file %s. (C)ontinue or (Q)uit?' %<br class="calibre9" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(outputFilename))<br class="calibre9" />22.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response = input('&gt; ')<br class="calibre9" />23.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not response.lower().startswith('c'):<br class="calibre9" />24.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sys.exit()</p>
<p class="indent">On line 23, we take the first letter of the string and check whether it is a <em class="calibre7">C</em> using the <span class="literal">startswith()</span> method. The <span class="literal">startswith()</span> method that we use is case sensitive and checks for a lowercase <span class="literal">'c'</span>, so we use the <span class="literal">lower()</span> method to modify the <span class="literal">response</span> string’s capitalization to always be lowercase. If the user didn’t enter a response starting with a <em class="calibre7">C</em>, then <span class="literal">startswith()</span> returns <span class="literal">False</span>, <span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-321"></span>which makes the <span class="literal">if</span> statement evaluate to <span class="literal">True</span> (because of the <span class="literal">not</span> in the <span class="literal">if</span> statement), and <span class="literal">sys.exit()</span> is called to end the program. Technically, the user doesn’t have to enter <span class="literal">Q</span> to quit; any string that doesn’t begin with <em class="calibre7">C</em> causes the <span class="literal">sys.exit()</span> function to be called to quit the program.</p>
<h3 class="h1" id="calibre_link-593"><strong class="calibre3">Reading the Input File</strong></h3>
<p class="noindent">On line 27, we start using the file object methods discussed at the beginning of this chapter.</p>
<p class="programs1">26.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Read in the message from the input file:<br class="calibre9" />27.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileObj = open(inputFilename)<br class="calibre9" />28.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;content = fileObj.read()<br class="calibre9" />29.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileObj.close()<br class="calibre9" />30.<br class="calibre9" />31.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('%sing...' % (myMode.title()))</p>
<p class="indent">Lines 27 to 29 open the file stored in <span class="literal">inputFilename</span>, read its contents into the <span class="literal">content</span> variable, and then close the file. After reading in the file, line 31 outputs a message for the user telling them that the encryption or decryption has begun. Because <span class="literal">myMode</span> should either contain the string <span class="literal">'encrypt'</span> or <span class="literal">'decrypt'</span>, calling the <span class="literal">title()</span> string method capitalizes the first letter of the string in <span class="literal">myMode</span> and splices the string into the <span class="literal">'%sing'</span> string, so it displays either <span class="literal">'Encrypting...'</span> or <span class="literal">'Decrypting...'</span>.</p>
<h3 class="h1" id="calibre_link-594"><strong class="calibre3">Measuring the Time It Took to Encrypt or Decrypt</strong></h3>
<p class="noindent">Encrypting or decrypting an entire file can take much longer than a short string. A user might want to know how long the process takes for a file. We can measure the length of the encryption or decryption process by using the <span class="literal">time</span> module.</p>
<h4 class="h2" id="calibre_link-595"><strong class="calibre3"><em class="calibre12">The time Module and time.time() Function</em></strong></h4>
<p class="noindent">The <span class="literal">time.time()</span> function returns the current time as a float value of the number of seconds since January 1, 1970. This moment is called the <em class="calibre7">Unix Epoch</em>. Enter the following into the interactive shell to see how this function works:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">import time</span><br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">time.time()</span><br class="calibre9" />1540944000.7197928<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">time.time()</span><br class="calibre9" />1540944003.4817972</p>
<p class="indent">Because <span class="literal">time.time()</span> returns a float value, it can be precise to a <em class="calibre7">millisecond</em> (that is, 1/1000 of a second). Of course, the numbers that <span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-322"></span><span class="literal">time.time()</span> displays depend on the moment in time that you call this function and may be difficult to interpret. It might not be clear that 1540944000.7197928 is Tuesday, October 30, 2018, at approximately 5 <small class="calibre14">pm</small>. However, the <span class="literal">time.time()</span> function is useful for comparing the number of seconds between calls to <span class="literal">time.time()</span>. We can use this function to determine how long a program has been running.</p>
<p class="indent">For example, if you subtract the floating-point values returned when I called <span class="literal">time.time()</span> previously in the interactive shell, you would get the amount of time in between those calls while I was typing:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">1540944003.4817972 - 1540944000.7197928</span><br class="calibre9" />2.7620043754577637</p>
<p class="indent">If you need to write code that handles dates and times, see <a href="https://www.nostarch.com/crackingcodes/" class="calibre8"><em class="calibre7">https://www.nostarch.com/crackingcodes/</em></a> for information on the <span class="literal">datetime</span> module.</p>
<h4 class="h2" id="calibre_link-596"><strong class="calibre3"><em class="calibre12">Using the time.time() Function in the Program</em></strong></h4>
<p class="noindent">On line 34, <span class="literal">time.time()</span> returns the current time to store in a variable named <span class="literal">startTime</span>. Lines 35 to 38 call <span class="literal">encryptMessage()</span> or <span class="literal">decryptMessage()</span>, depending on whether <span class="literal">'encrypt'</span> or <span class="literal">'decrypt'</span> is stored in the <span class="literal">myMode</span> variable.</p>
<p class="programs1">33.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Measure how long the encryption/decryption takes:<br class="calibre9" />34.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startTime = time.time()<br class="calibre9" />35.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if myMode == 'encrypt':<br class="calibre9" />36.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translated = transpositionEncrypt.encryptMessage(myKey, content)<br class="calibre9" />37.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elif myMode == 'decrypt':<br class="calibre9" />38.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translated = transpositionDecrypt.decryptMessage(myKey, content)<br class="calibre9" />39.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalTime = round(time.time() - startTime, 2)<br class="calibre9" />40.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('%sion time: %s seconds' % (myMode.title(), totalTime))</p>
<p class="indent">Line 39 calls <span class="literal">time.time()</span> again after the program decrypts or encrypts and subtracts <span class="literal">startTime</span> from the current time. The result is the number of seconds between the two calls to <span class="literal">time.time()</span>. The <span class="literal">time.time() - startTime</span> expression evaluates to a value that is passed to the <span class="literal">round()</span> function, which rounds to the nearest two decimal points, because we don’t need millisecond precision for the program. This value is stored in <span class="literal">totalTime</span>. Line 40 uses string splicing to print the program mode and displays to the user the amount of time it took for the program to encrypt or decrypt.</p>
<h3 class="h1" id="calibre_link-597"><strong class="calibre3">Writing the Output File</strong></h3>
<p class="noindent">The encrypted (or decrypted) file contents are now stored in the <span class="literal">translated</span> variable. But this string is forgotten when the program terminates, so we want to store the string in a file to have even after the program has finished running. The code on lines 43 to 45 does this by <span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-286"></span>opening a new file (and passing <span class="literal">'w'</span> to the <span class="literal">open()</span> function) and then calling the <span class="literal">write()</span> file object method:</p>
<p class="programs1">42.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Write out the translated message to the output file:<br class="calibre9" />43.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputFileObj = open(outputFilename, 'w')<br class="calibre9" />44.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputFileObj.write(translated)<br class="calibre9" />45.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputFileObj.close()</p>
<p class="indent">Then, lines 47 and 48 print more messages to the user indicating that the process is done and the name of the written file:</p>
<p class="programs1">47.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('Done %sing %s (%s characters).' % (myMode, inputFilename,<br class="calibre9" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len(content)))<br class="calibre9" />48.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('%sed file is %s.' % (myMode.title(), outputFilename))</p>
<p class="indent">Line 48 is the last line of the <span class="literal">main()</span> function.</p>
<h3 class="h1" id="calibre_link-598"><strong class="calibre3">Calling the main() Function</strong></h3>
<p class="noindent">Lines 53 and 54 (which are executed after the <span class="literal">def</span> statement on line 6 is executed) call the <span class="literal">main()</span> function if this program is being run instead of being imported:</p>
<p class="programs1">51. # If transpositionCipherFile.py is run (instead of imported as a module),<br class="calibre9" />52. # call the main() function:<br class="calibre9" />53. if __name__ == '__main__':<br class="calibre9" />54.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;main()</p>
<p class="indent">This is explained in detail in “<a href="#calibre_link-346" class="calibre8">The <span class="literal">__name__</span> Variable</a>” on <a href="#calibre_link-346" class="calibre8">page 95</a>.</p>
<h3 class="h1" id="calibre_link-599"><strong class="calibre3">Summary</strong></h3>
<p class="noindent">Congratulations! There wasn’t much to the <em class="calibre7">transpositionFileCipher.py</em> program aside from the <span class="literal">open()</span>, <span class="literal">read()</span>, <span class="literal">write()</span>, and <span class="literal">close()</span> functions, which let us encrypt large text files on a hard drive. You learned how to use the <span class="literal">os.path.exists()</span> function to check whether a file already exists. As you’ve seen, we can extend our programs’ capabilities by importing their functions for use in new programs. This greatly increases our ability to use computers to encrypt information.</p>
<p class="indent">You also learned some useful string methods to make a program more flexible when accepting user input and how to use the <span class="literal">time</span> module to measure how fast your program runs.</p>
<p class="indent">Unlike the Caesar cipher program, the transposition file cipher has too many possible keys to attack by simply using brute force. But if we can write a program that recognizes English (as opposed to strings of gibberish), the computer could examine the output of thousands of decryption attempts and determine which key can successfully decrypt a message to English. You’ll learn how to do this in <a href="#calibre_link-28" class="calibre8">Chapter 11</a>.</p>
<div class="sidebar">
<p class="sidebart" id="calibre_link-600"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-928"></span><strong class="calibre5">PRACTICE QUESTIONS</strong></p>
<p class="noindent">Answers to the practice questions can be found on the book’s website at <em class="calibre7"><a href="https://www.nostarch.com/crackingcodes/" class="calibre8">https://www.nostarch.com/crackingcodes/</a></em>.</p>
<ol class="calibre13">
<li value="1" class="calibre11"><p class="noindent">Which is correct: <span class="literal">os.exists()</span> or <span class="literal">os.path.exists()</span>?</p></li>
<li value="2" class="calibre11"><p class="noindent">When is the Unix Epoch?</p></li>
<li value="3" class="calibre11"><p class="noindent">What do the following expressions evaluate to?</p>
<p class="programs1">'Foobar'.startswith('Foo')<br class="calibre9" />'Foo'.startswith('Foobar')<br class="calibre9" />'Foobar'.startswith('foo')<br class="calibre9" />'bar'.endswith('Foobar')<br class="calibre9" />'Foobar'.endswith('bar')<br class="calibre9" />'The quick brown fox jumped over the yellow lazy dog.'.title()</p>
</li>
</ol>
<span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-929"></span>
</div>
</div>
