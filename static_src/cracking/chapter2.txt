

<div><a target="_blank" href="https://www.amazon.com/gp/product/1593278225/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1593278225&linkCode=as2&tag=playwithpyth-20&linkId=bf3b22819f0886d277e88b8a653b81ad">
<img src="images/cover_crackingcodes_thumb.png" /><br />Buy the print or ebook online.</a></div>
<div><a href="chapter1.html">Previous Chapter - Making Paper Cryptography Tools</a> | <a href="chapter3.html">Next Chapter - String and Writing Programs</a></div>
<div id="calibre_link-836" class="calibre">
<h2 class="h2a1" id="calibre_link-11"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-897" class="calibre1"></span><span class="big">2</span><br class="calibre15" />PROGRAMMING IN THE INTERACTIVE SHELL</h2>
<p class="epigraph"><em class="calibre7">“The Analytical Engine has no pretensions whatever to originate anything. It can do whatever we know how to order it to perform.”<br class="calibre9" />&mdash;Ada Lovelace, October 1842</em></p>
<div class="image"><img src="images/00078.jpeg" alt="Images" class="calibre4" /></div>
<p class="noindent">Before you can write encryption programs, you need to learn some basic programming concepts. These concepts include values, operators, expressions, and variables.</p>
<div class="sidebar">
<p class="sidebart"><strong class="calibre5">TOPICS COVERED IN THIS CHAPTER</strong></p>
<ul class="calibre10">
<li class="calibre11"><p class="noindent">Operators</p></li>
<li class="calibre11"><p class="noindent">Values</p></li>
<li class="calibre11"><p class="noindent">Integers and floating-point numbers</p></li>
<li class="calibre11"><p class="noindent">Expressions</p></li>
<li class="calibre11"><p class="noindent">Evaluating expressions</p></li>
<li class="calibre11"><p class="noindent">Storing values in variables</p></li>
<li class="calibre11"><p class="noindent">Overwriting variables</p></li>
</ul>
</div>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-72"></span>Let’s start by exploring how to do some simple math in Python’s interactive shell. Be sure to read this book next to your computer so you can enter the short code examples and see what they do. Developing muscle memory from typing programs will help you remember how Python code is constructed.</p>
<h3 class="h1" id="calibre_link-456"><strong class="calibre3">Some Simple Math Expressions</strong></h3>
<p class="noindent">Start by opening IDLE (see “<a href="#calibre_link-444" class="calibre8">Starting IDLE</a>” on <a href="#calibre_link-444" class="calibre8">page xxvii</a>). You’ll see the interactive shell and the cursor blinking next to the <span class="literal">&gt;&gt;&gt;</span> prompt. The inter&shy;active shell can work just like a calculator. Type <span class="literal">2 + 2</span> into the shell and press <small class="calibre14">enter</small> on your keyboard. (On some keyboards, this is the <small class="calibre14">return</small> key.) The computer should respond by displaying the number <span class="literal">4</span>, as shown in <a href="#calibre_link-837" class="calibre8">Figure 2-1</a>.</p>
<div class="image"><img src="images/00089.jpeg" alt="Images" class="calibre4" /></div>
<p class="figcap"><a id="calibre_link-837" class="calibre8"></a><em class="calibre7">Figure 2-1: Type <span class="literalcaption">2 + 2</span> into the shell.</em></p>
<p class="indent">In the example in <a href="#calibre_link-837" class="calibre8">Figure 2-1</a>, the <span class="literal">+</span> sign tells the computer to add the numbers <span class="literal">2</span> and <span class="literal">2</span>, but Python can do other calculations as well, such as subtract numbers using the minus sign (<span class="literal">&ndash;</span>), multiply numbers with an asterisk (<span class="literal">*</span>), or divide numbers with a forward slash (<span class="literal">/</span>). When used in this way, <span class="literal">+</span>, <span class="literal">-</span>, <span class="literal">*</span>, and <span class="literal">/</span> are called <em class="calibre7">operators</em> because they tell the computer to perform an operation on the numbers surrounding them. <a href="#calibre_link-838" class="calibre8">Table 2-1</a> summarizes the Python math operators. The <span class="literal">2</span>s (or other numbers) are called <em class="calibre7">values</em>.</p>
<p class="tabcap"><a id="calibre_link-838" class="calibre8"></a><strong class="calibre5">Table 2-1:</strong> Math Operators in Python</p>
<table class="topbot">
<thead class="calibre16">
<tr class="table_w">
<td class="table_th"><p class="table"><strong class="calibre5">Operator</strong></p></td>
<td class="table_th"><p class="table"><strong class="calibre5">Operation</strong></p></td>
</tr>
</thead>
<tbody class="calibre17">
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">+</span></p></td>
<td class="calibre18"><p class="table">Addition</p></td>
</tr>
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">-</span></p></td>
<td class="calibre18"><p class="table">Subtraction</p></td>
</tr>
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">*</span></p></td>
<td class="calibre18"><p class="table">Multiplication</p></td>
</tr>
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">/</span></p></td>
<td class="calibre18"><p class="table">Division</p></td>
</tr></tbody></table>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-185"></span>By itself, <span class="literal">2 + 2</span> isn’t a program; it’s just a single instruction. Programs are made of many of these instructions.</p>
<h4 class="h2" id="calibre_link-457"><strong class="calibre3"><em class="calibre12">Integers and Floating-Point Values</em></strong></h4>
<p class="noindent">In programming, whole numbers, such as <span class="literal">4</span>, <span class="literal">0</span>, and <span class="literal">99</span>, are called <em class="calibre7">integers</em>. Numbers with decimal points (<span class="literal">3.5</span>, <span class="literal">42.1</span>, and <span class="literal">5.0</span>) are called <em class="calibre7">floating-point numbers</em>. In Python, the number <span class="literal">5</span> is an integer, but if you wrote it as <span class="literal">5.0</span>, it would be a floating-point number.</p>
<p class="indent">Integers and floating points are <em class="calibre7">data types</em>. The value <span class="literal">42</span> is a value of the integer, or <em class="calibre7">int</em>, data type. The value <span class="literal">7.5</span> is a value of the floating point, or <em class="calibre7">float</em>, data type.</p>
<p class="indent">Every value has a data type. You’ll learn about a few other data types (such as strings in <a href="#calibre_link-18" class="calibre8">Chapter 3</a>), but for now just remember that any time we talk about a value, that value is of a certain data type. It’s usually easy to identify the data type just by looking at how the value is written. Ints are numbers without decimal points. Floats are numbers with decimal points. So <span class="literal">42</span> is an int, but <span class="literal">42.0</span> is a float.</p>
<h4 class="h2" id="calibre_link-458"><strong class="calibre3"><em class="calibre12">Expressions</em></strong></h4>
<p class="noindent">You’ve already seen Python solve one math problem, but Python can do a lot more. Try typing the following math problems into the shell, pressing the <small class="calibre14">enter</small> key after each one:</p>
<p class="programs1"><span class="ent">➊</span> &gt;&gt;&gt; <span class="codestrong">2+2+2+2+2</span><br class="calibre9" />&nbsp;&nbsp;&nbsp;10<br class="calibre9" />&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; <span class="codestrong">8*6</span><br class="calibre9" />&nbsp;&nbsp;&nbsp;48<br class="calibre9" /><span class="ent">➋</span> &gt;&gt;&gt; <span class="codestrong">10-5+6</span><br class="calibre9" />&nbsp;&nbsp;&nbsp;11<br class="calibre9" /><span class="ent">➌</span> &gt;&gt;&gt; <span class="codestrong">2&nbsp;&nbsp;+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2</span><br class="calibre9" />&nbsp;&nbsp;&nbsp;4</p>
<img src="images/00090.jpeg" alt="Images" class="calibre4" />
<p class="figcap"><a id="calibre_link-839" class="calibre8"></a><em class="calibre7">Figure 2-2: An expression is made up of values (like <span class="literalcaption">2</span>) and operators (like <span class="literalcaption">+</span>).</em></p>
<p class="indent">These math problems are called <em class="calibre7">expressions</em>. Computers can solve millions of these problems in seconds. Expressions are made up of values (the numbers) connected by operators (the math signs), as shown in <a href="#calibre_link-839" class="calibre8">Figure 2-2</a>. You can have as many numbers in an expression as you want <span class="ent">➊</span>, as long as they’re connected by operators; you can even use multiple types of operators in a single expression <span class="ent">➋</span>. You can also enter any number of spaces between the integers and these operators <span class="ent">➌</span>. But be sure to always start an expression at the beginning of the line, with no spaces in front, because spaces at the beginning of a line change how Python interprets instructions. You’ll learn more about spaces at the beginning of a line in “<a href="#calibre_link-493" class="calibre8">Blocks</a>” on <a href="#calibre_link-493" class="calibre8">page 45</a>.</p>
<h4 class="h2" id="calibre_link-459"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-91" class="calibre1"></span><strong class="calibre3"><em class="calibre12">Order of Operations</em></strong></h4>
<p class="noindent">You might remember the phrase “order of operations” from your math class. For example, multiplication is done before addition. The expression <span class="literal">2 + 4 * 3</span> evaluates to <span class="literal">14</span> because multiplication is done first to evaluate <span class="literal">4 * 3</span>, and then <span class="literal">2</span> is added. Parentheses can make different operators go first. In the expression <span class="literal">(2 + 4) * 3</span>, the addition is done first to evaluate <span class="literal">(2 + 4)</span>, and then that sum is multiplied by <span class="literal">3</span>. The parentheses make the expression evaluate to <span class="literal">18</span> instead of <span class="literal">14</span>. The order of operations (also called <em class="calibre7">precedence</em>) of Python math operators is similar to that of mathematics. Operations inside parentheses are evaluated first; next the <span class="literal">*</span> and <span class="literal">/</span> operators are evaluated from left to right; and then the <span class="literal">+</span> and <span class="literal">-</span> operators are evaluated from left to right.</p>
<h4 class="h2" id="calibre_link-460"><strong class="calibre3"><em class="calibre12">Evaluating Expressions</em></strong></h4>
<p class="noindent">When a computer solves the expression <span class="literal">10 + 5</span> and gets the value <span class="literal">15</span>, we say it has <em class="calibre7">evaluated</em> the expression. Evaluating an expression reduces the expression to a single value, just like solving a math problem reduces the problem to a single number: the answer.</p>
<p class="indent">The expressions <span class="literal">10 + 5</span> and <span class="literal">10 + 3 + 2</span> have the same value, because they both evaluate to <span class="literal">15</span>. Even single values are considered expressions: the expression <span class="literal">15</span> evaluates to the value <span class="literal">15</span>.</p>
<p class="indent">Python continues to evaluate an expression until it becomes a single value, as in the following:</p>
<div class="image1"><img src="images/00045.jpeg" alt="Images" class="calibre4" /></div>
<p class="indent">Python evaluates an expression starting with the innermost, leftmost parentheses. Even when parentheses are nested in each other, the parts of expressions inside them are evaluated with the same rules as any other expression. So when Python encounters <span class="literal">((7 + 1) / (3 - 1))</span>, it first solves the expression in the leftmost inner parentheses, <span class="literal">(7 + 1)</span>, and then solves the expression on the right, <span class="literal">(3 - 1)</span>. When each expression in the inner parentheses is reduced to a single value, the expressions in the outer parentheses are then evaluated. Notice that division evaluates to a floating-point value. Finally, when there are no more expressions in parentheses, Python performs any remaining calculations in the order of operations.</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-220"></span>In an expression, you can have two or more values connected by operators, or you can have just one value, but if you enter one value and an operator into the interactive shell, you’ll get an error message:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">5 +</span><br class="calibre9" />SyntaxError: invalid syntax</p>
<p class="indent">This error happens because <span class="literal">5 +</span> is not an expression. Expressions with multiple values need operators to connect those values, and in the Python language, the <span class="literal">+</span> operator expects to connect two values. A <em class="calibre7">syntax error</em> means that the computer doesn’t understand the instruction you gave it because you typed it incorrectly. This may not seem important, but computer programming isn’t just about telling the computer what to do&mdash;it’s also about knowing the correct way to give the computer instructions that it can follow.</p>
<div class="sidebar">
<p class="sidebart"><strong class="calibre5">ERRORS ARE OKAY!</strong></p>
<p class="noindent">It’s perfectly fine to make errors! You won’t break your computer by entering code that causes errors. Python will simply tell you an error has occurred and then display the &gt;&gt;&gt; prompt again. You can continue entering new code into the interactive shell.</p>
<p class="indent">Until you gain more programming experience, error messages might not make a lot of sense to you. However, you can always google the error message text to find web pages that explain that specific error. You can also go to <em class="calibre7"><a href="https://www.nostarch.com/crackingcodes/" class="calibre8">https://www.nostarch.com/crackingcodes/</a></em> to see a list of common Python error messages and their meanings.</p>
</div>
<h3 class="h1" id="calibre_link-461"><strong class="calibre3">Storing Values with Variables</strong></h3>
<p class="noindent">Programs often need to save values to use later in the program. You can store values in <em class="calibre7">variables</em> by using the <span class="literal">=</span> sign (called the <em class="calibre7">assignment operator</em>). For example, to store the value <span class="literal">15</span> in a variable named <span class="literal">spam</span>, enter <span class="literal">spam = 15</span> into the shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">spam = 15</span></p>
<p class="indent">You can think of the variable like a box with the value <span class="literal">15</span> inside it (as shown in <a href="#calibre_link-840" class="calibre8">Figure 2-3</a>). The variable name <span class="literal">spam</span> is the label on the box (so we can tell one variable from another), and the value stored in it is like a note inside the box.</p>
<p class="indent">When you press <small class="calibre14">enter</small>, you won’t see anything except a blank line in response. Unless you see an error message, you can assume that the instruction executed successfully. The next <span class="literal">&gt;&gt;&gt;</span> prompt appears so you can enter the next instruction.</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-133"></span>This instruction with the <span class="literal">=</span> assignment operator (called an <em class="calibre7">assignment statement</em>) creates the variable <span class="literal">spam</span> and stores the value <span class="literal">15</span> in it. Unlike expressions, <em class="calibre7">statements</em> are instructions that don’t evaluate to any value; instead, they just perform an action. This is why no value is displayed on the next line in the shell.</p>
<p class="indent">Figuring out which instructions are expressions and which are statements might be confusing. Just remember that if a Python instruction evaluates to a single value, it’s an expression. If it doesn’t, it’s a statement.</p>
<div class="image"><img src="images/00046.jpeg" alt="Images" class="calibre4" /></div>
<p class="figcap"><a id="calibre_link-840" class="calibre8"></a><em class="calibre7">Figure 2-3: Variables are like boxes with names that can hold value.</em></p>
<p class="indent">An assignment statement is written as a variable, followed by the <span class="literal">=</span> operator, followed by an expression, as shown in <a href="#calibre_link-841" class="calibre8">Figure 2-4</a>. The value that the expression evaluates to is stored inside the variable.</p>
<div class="image"><img src="images/00048.jpeg" alt="Images" class="calibre4" /></div>
<p class="figcap"><a id="calibre_link-841" class="calibre8"></a><em class="calibre7">Figure 2-4: The parts of an assignment statement</em></p>
<p class="indent">Keep in mind that variables store single values, not the expressions they are assigned. For example, if you enter the statement <span class="literal">spam = 10 + 5</span>, the expression <span class="literal">10 + 5</span> is first evaluated to <span class="literal">15</span> and then the value <span class="literal">15</span> is stored in the variable <span class="literal">spam</span>, as we can see by entering the variable name into the shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">spam = 10 + 5</span><br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">spam</span><br class="calibre9" />15</p>
<p class="indent">A variable by itself is an expression that evaluates to the value stored in the variable. A value by itself is also an expression that evaluates to itself:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">15</span><br class="calibre9" />15</p>
<p class="indent">And here’s an interesting twist. If you now enter <span class="literal">spam + 5</span> into the shell, you’ll get the integer <span class="literal">20</span>:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">spam = 15</span><br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">spam + 5</span><br class="calibre9" />20</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-329"></span>As you can see, variables can be used in expressions the same way values can. Because the value of <span class="literal">spam</span> is <span class="literal">15</span>, the expression <span class="literal">spam + 5</span> evaluates to the expression <span class="literal">15 + 5</span>, which then evaluates to <span class="literal">20</span>.</p>
<h4 class="h2" id="calibre_link-462"><strong class="calibre3"><em class="calibre12">Overwriting Variables</em></strong></h4>
<p class="noindent">You can change the value stored in a variable by entering another assignment statement. For example, enter the following:</p>
<p class="programs1">&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; <span class="codestrong">spam = 15</span><br class="calibre9" /><span class="ent">➊</span> &gt;&gt;&gt; <span class="codestrong">spam + 5</span><br class="calibre9" /><span class="ent">➋</span> 20<br class="calibre9" /><span class="ent">➌</span> &gt;&gt;&gt; <span class="codestrong">spam = 3</span><br class="calibre9" /><span class="ent">➍</span> &gt;&gt;&gt; <span class="codestrong">spam + 5</span><br class="calibre9" /><span class="ent">➎</span> 8</p>
<p class="indent">The first time you enter <span class="literal">spam + 5</span> <span class="ent">➊</span>, the expression evaluates to <span class="literal">20</span> <span class="ent">➋</span> because you stored the value <span class="literal">15</span> inside the variable <span class="literal">spam</span>. But when you enter <span class="literal">spam = 3</span> <span class="ent">➌</span>, the value <span class="literal">15</span> is <em class="calibre7">overwritten</em> (that is, replaced) with the value <span class="literal">3</span>, as shown in <a href="#calibre_link-842" class="calibre8">Figure 2-5</a>. Now when you enter <span class="literal">spam + 5</span> <span class="ent">➍</span>, the expression evaluates to <span class="literal">8</span> <span class="ent">➎</span> because <span class="literal">spam + 5</span> evaluates to <span class="literal">3 + 5</span>. The old value in <span class="literal">spam</span> is forgotten.</p>
<div class="image"><img src="images/00050.jpeg" alt="Images" class="calibre4" /></div>
<p class="figcap"><a id="calibre_link-842" class="calibre8"></a><em class="calibre7">Figure 2-5: The value <span class="literalcaption">15</span> in spam is over&shy;-written by the value <span class="literalcaption">3</span>.</em></p>
<p class="indent">You can even use the value in the <span class="literal">spam</span> variable to assign <span class="literal">spam</span> a new value:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">spam = 15</span><br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">spam = spam + 5</span><br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">spam</span><br class="calibre9" />20</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-158"></span>The assignment statement <span class="literal">spam = spam + 5</span> tells the computer that “the new value of the <span class="literal">spam</span> variable is the current value of <span class="literal">spam</span> plus five.” The variable on the left side of the <span class="literal">=</span> sign is assigned the value of the expression on the right side. You can keep increasing the value in <span class="literal">spam</span> by <span class="literal">5</span> several times:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">spam = 15</span><br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">spam = spam + 5</span><br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">spam = spam + 5</span><br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">spam = spam + 5</span><br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">spam</span><br class="calibre9" />30</p>
<p class="indent">The value in <span class="literal">spam</span> is changed each time <span class="literal">spam = spam + 5</span> is executed. The value stored in <span class="literal">spam</span> ends up being <span class="literal">30</span>.</p>
<h4 class="h2" id="calibre_link-463"><strong class="calibre3"><em class="calibre12">Variable Names</em></strong></h4>
<p class="noindent">Although the computer doesn’t care what you name your variables, you should. Giving variables names that reflect what type of data they contain makes it easier to understand what a program does. You could give your variables names like <span class="literal">abrahamLincoln</span> or <span class="literal">monkey</span> even if your program had nothing to do with Abraham Lincoln or monkeys&mdash;the computer would still run the program (as long as you consistently used <span class="literal">abrahamLincoln</span> or <span class="literal">monkey</span>). But when you return to a program after not seeing it for a long time, you might not remember what each variable does.</p>
<p class="indent">A good variable name describes the data it contains. Imagine that you moved to a new house and labeled all of your moving boxes <em class="calibre7">Stuff</em>. You’d never find anything! The variable names <span class="literal">spam</span>, <span class="literal">eggs</span>, <span class="literal">bacon</span>, and so on (inspired by the <em class="calibre7">Monty Python</em> “Spam” sketch) are used as generic names for the examples in this book and in much of Python’s documentation, but in your programs, a descriptive name helps make your code more readable.</p>
<p class="indent">Variable names (as well as everything else in Python) are case sensitive. <em class="calibre7">Case sensitive</em> means the same variable name in a different case is considered an entirely different variable. For example, <span class="literal">spam</span>, <span class="literal">SPAM</span>, <span class="literal">Spam</span>, and <span class="literal">sPAM</span> are considered four different variables in Python. They each can contain their own separate values and can’t be used interchangeably.</p>
<h3 class="h1" id="calibre_link-464"><strong class="calibre3">Summary</strong></h3>
<p class="noindent">So when are we going to start making encryption programs? Soon. But before you can hack ciphers, you need to learn just a few more basic programming concepts so there’s one more programming chapter you need to read.</p>
<p class="indent">In this chapter, you learned the basics of writing Python instructions in the interactive shell. Python needs you to tell it exactly what to do in a way it expects, because computers only understand very simple instructions. You learned that Python can evaluate expressions (that is, reduce the expression to a single value) and that expressions are values (such as <span class="literal">2</span> or <span class="literal">5</span>) combined with operators (such as <span class="literal">+</span> or <span class="literal">-</span>). You also learned that you can store values inside variables so your program can remember them to use later on.</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-898"></span>The interactive shell is a useful tool for learning what Python instructions do because it lets you enter them one at a time and see the results. In <a href="#calibre_link-18" class="calibre8">Chapter 3</a>, you’ll create programs that contain many instructions that are executed in sequence rather than one at a time. We’ll discuss some more basic concepts, and you’ll write your first program!</p>
<div class="sidebar">
<p class="sidebart" id="calibre_link-465"><strong class="calibre5">PRACTICE QUESTIONS</strong></p>
<p class="noindent">Answers to the practice questions can be found on the book’s website at <em class="calibre7"><a href="https://www.nostarch.com/crackingcodes/" class="calibre8">https://www.nostarch.com/crackingcodes/</a></em>.</p>
<ol class="calibre13">
<li value="1" class="calibre11"><p class="noindent">Which is the operator for division, <span class="literal">/</span> or <span class="literal">\</span> ?</p></li>
<li value="2" class="calibre11"><p class="noindent">Which of the following is an integer value, and which is a floating-point value?</p>
<p class="programs1">42<br class="calibre9" />3.141592</p>
</li>
<li value="3" class="calibre11"><p class="noindent">Which of the following lines are <em class="calibre7">not</em> expressions?</p>
<p class="programs1">4 x 10 + 2<br class="calibre9" />3 * 7 + 1<br class="calibre9" />2 +<br class="calibre9" />42<br class="calibre9" />2 + 2<br class="calibre9" />spam = 42</p>
</li>
<li value="4" class="calibre11"><p class="noindent">If you enter the following lines of code into the interactive shell, what do lines <span class="ent">➊</span> and <span class="ent">➋</span> print?</p>
<p class="programs1">&nbsp;&nbsp;&nbsp;spam = 20<br class="calibre9" /><span class="ent">➊</span> spam + 20<br class="calibre9" />&nbsp;&nbsp;&nbsp;SPAM = 30<br class="calibre9" /><span class="ent">➊</span> spam</p>
</li>
</ol>
<span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-899"></span>
</div>
</div>
