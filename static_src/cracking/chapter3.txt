


<div><a target="_blank" href="https://www.amazon.com/gp/product/1593278225/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1593278225&linkCode=as2&tag=playwithpyth-20&linkId=bf3b22819f0886d277e88b8a653b81ad">
<img src="images/cover_crackingcodes_thumb.png" /><br />Buy the print or ebook online.</a></div>
<div><a href="chapter2.html">Previous Chapter - Programming in the Interactive Shell</a> | <a href="chapter4.html">Next Chapter - The Reverse Cipher</a></div>
<div id="calibre_link-373" class="calibre">
<h2 class="h2a1" id="calibre_link-18"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-900" class="calibre1"></span><span class="big">3</span><br class="calibre15" />STRINGS AND WRITING PROGRAMS</h2>
<p class="epigraph"><em class="calibre7">“The only way to learn a new programming language is by writing programs in it.”<br class="calibre9" />&mdash;Brian Kernighan and Dennis Ritchie,</em><br class="calibre9" />The C Programming Language</p>
<div class="image"><img src="images/00078.jpeg" alt="Images" class="calibre4" /></div>
<p class="noindent"><a href="#calibre_link-11" class="calibre8">Chapter 2</a> gave you enough integers and math for now. Python is more than just a calculator. Because cryptography is all about dealing with text values by turning plaintext into ciphertext and back again, you’ll learn how to store, combine, and display text on the screen in this chapter. You’ll also make your first program, which greets the user with the text “Hello, world!” and lets the user input their name.</p>
<div class="sidebar">
<p class="sidebart"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-93"></span><strong class="calibre5">TOPICS COVERED IN THIS CHAPTER</strong></p>
<ul class="calibre10">
<li class="calibre11"><p class="noindent">Strings</p></li>
<li class="calibre11"><p class="noindent">String concatenation and replication</p></li>
<li class="calibre11"><p class="noindent">Indexes and slices</p></li>
<li class="calibre11"><p class="noindent">The <span class="literal">print()</span> function</p></li>
<li class="calibre11"><p class="noindent">Writing source code with IDLE</p></li>
<li class="calibre11"><p class="noindent">Saving and running programs in IDLE</p></li>
<li class="calibre11"><p class="noindent">Comments</p></li>
<li class="calibre11"><p class="noindent">The <span class="literal">input()</span> function</p></li>
</ul>
</div>
<h3 class="h1" id="calibre_link-466"><strong class="calibre3">Working with Text Using String Values</strong></h3>
<p class="noindent">In Python, we work with little chunks of text called string values (or simply <em class="calibre7">strings</em>). All of our cipher and hacking programs deal with string values to turn plaintext like <span class="literal">'One if by land, two if by space'</span> into ciphertext like <span class="literal">'</span><span class="literal">b1rJvsJo</span><span class="literal">!Jyn1q,J702JvsJo!J63nprM'</span>. The plaintext and ciphertext are represented in our program as string values, and there are many ways in which Python code can manipulate these values.</p>
<p class="indent">You can store string values inside variables just as you can with integer and floating-point values. When you type a string, put it between two single quotes (<span class="literal">'</span>) to show where the string starts and ends. Enter the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">spam = 'hello'</span></p>
<p class="indent">The single quotes are not part of the string value. Python knows that <span class="literal">'hello'</span> is a string and <span class="literal">spam</span> is a variable because strings are surrounded by quotes and variable names are not.</p>
<p class="indent">If you enter <span class="literal">spam</span> into the shell, you will see the contents of the <span class="literal">spam</span> variable (the <span class="literal">'hello'</span> string):</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">spam = 'hello'</span><br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">spam</span><br class="calibre9" />'hello'</p>
<p class="indent">This is because Python evaluates a variable to the value stored inside it: in this case, the string <span class="literal">'hello'</span>. Strings can have almost any keyboard character in them. These are all examples of strings:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">'hello'</span><br class="calibre9" />'hello'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'KITTENS'</span><br class="calibre9" /><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-73"></span>'KITTENS'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">''</span><br class="calibre9" />''<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'7 apples, 14 oranges, 3 lemons'</span><br class="calibre9" />'7 apples, 14 oranges, 3 lemons'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'Anything not pertaining to elephants is irrelephant.'</span><br class="calibre9" />'Anything not pertaining to elephants is irrelephant.'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'O*&amp;#wY%*&amp;OcfsdYO*&amp;gfC%YO*&amp;%3yc8r2'</span><br class="calibre9" />'O*&amp;#wY%*&amp;OcfsdYO*&amp;gfC%YO*&amp;%3yc8r2'</p>
<p class="indent">Notice that the <span class="literal">''</span> string has zero characters in it; there is nothing between the single quotes. This is known as a <em class="calibre7">blank string</em> or <em class="calibre7">empty string</em>.</p>
<h4 class="h2" id="calibre_link-467"><strong class="calibre3"><em class="calibre12">String Concatenation with the + Operator</em></strong></h4>
<p class="noindent">You can add two string values to create one new string by using the <span class="literal">+</span> operator. Doing so is called <em class="calibre7">string concatenation</em>. Enter <span class="literal">'Hello,' + 'world!'</span> into the shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">'Hello,' + 'world!'</span><br class="calibre9" />'Hello,world!'</p>
<p class="indent">Python concatenates <em class="calibre7">exactly</em> the strings you tell it to concatenate, so it won’t put a space between strings when you concatenate them. If you want a space in the resulting string, there must be a space in one of the two original strings. To put a space between <span class="literal">'Hello,'</span> and <span class="literal">'world!'</span>, you can put a space at the end of the <span class="literal">'Hello,'</span> string and before the second single quote, like this:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">'Hello, ' + 'world!'</span><br class="calibre9" />'Hello, world!'</p>
<p class="indent">The <span class="literal">+</span> operator can concatenate two string values into a new string value (<span class="literal">'</span><span class="literal">Hello, ' + 'world!'</span> to <span class="literal">'Hello, world!'</span>), just like it can add two integer values to result in a new integer value (<span class="literal">2 + 2</span> to <span class="literal">4</span>). Python knows what the <span class="literal">+</span> operator should do because of the data types of the values. As you learned in <a href="#calibre_link-11" class="calibre8">Chapter 2</a>, the data type of a value tells us (and the computer) what kind of data the value is.</p>
<p class="indent">You can use the <span class="literal">+</span> operator in an expression with two or more strings or integers as long as the data types match. If you try to use the operator with one string and one integer, you’ll get an error. Enter this code into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">'Hello' + 42</span><br class="calibre9" />Traceback (most recent call last):<br class="calibre9" />&nbsp;&nbsp;File "&lt;stdin&gt;", line 1, in &lt;module&gt;<br class="calibre9" />TypeError: must be str, not int<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'Hello' + '42'</span><br class="calibre9" />'Hello42'</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-74"></span>The first line of code causes an error because <span class="literal">'Hello'</span> is a string and <span class="literal">42</span> is an integer. But in the second line of code, <span class="literal">'42'</span> is a string, so Python concatenates it.</p>
<h4 class="h2" id="calibre_link-468"><strong class="calibre3"><em class="calibre12">String Replication with the * Operator</em></strong></h4>
<p class="noindent">You can also use the <span class="literal">*</span> operator on a string and an integer to do <em class="calibre7">string replication</em>. This replicates (that is, repeats) a string by however many times the integer value is. Enter the following into the interactive shell:</p>
<p class="programs1"><span class="ent">➊</span> &gt;&gt;&gt; <span class="codestrong">'</span><span class="codestrong">Hello' * 3</span><br class="calibre9" />&nbsp;&nbsp;&nbsp;'HelloHelloHello'<br class="calibre9" />&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; <span class="codestrong">spam = 'Abcdef'</span><br class="calibre9" /><span class="ent">➋</span> &gt;&gt;&gt; <span class="codestrong">spam = spam * 3</span><br class="calibre9" />&nbsp;&nbsp;&nbsp;&gt;&gt;&gt; <span class="codestrong">spam</span><br class="calibre9" />&nbsp;&nbsp;&nbsp;'AbcdefAbcdefAbcdef'</p>
<p class="indent">To replicate a string, type the string, then the <span class="literal">*</span> operator, and then the number of times you want the string to repeat <span class="ent">➊</span>. You can also store a string, like we’ve done with the <span class="literal">spam</span> variable, and then replicate the variable instead <span class="ent">➋</span>. You can even store a replicated string back into the same variable or a new variable.</p>
<p class="indent">As you saw in <a href="#calibre_link-11" class="calibre8">Chapter 2</a>, the <span class="literal">*</span> operator can work with two integer values to multiply them. But it can’t work with two string values, which would cause an error, like this:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">'Hello' * 'world!'</span><br class="calibre9" />Traceback (most recent call last):<br class="calibre9" />&nbsp;&nbsp;File "&lt;stdin&gt;", line 1, in &lt;module&gt;<br class="calibre9" />TypeError: can't multiply sequence by non-int of type 'str'</p>
<p class="indent">String concatenation and string replication show that operators in Python can do different tasks based on the data types of the values they operate on. The <span class="literal">+</span> operator can do addition or string concatenation. The <span class="literal">*</span> operator can do multiplication or string replication.</p>
<h4 class="h2" id="calibre_link-469"><strong class="calibre3"><em class="calibre12">Getting Characters from Strings Using Indexes</em></strong></h4>
<p class="noindent">Your encryption programs often need to get a single character from a string, which you can accomplish through indexing. With <em class="calibre7">indexing</em>, you add square brackets <span class="literal">[</span> and <span class="literal">]</span> to the end of a string value (or a variable containing a string) with a number between them to access one character. This number is called the <em class="calibre7">index</em>, and it tells Python which position in the string has the character you want. Python indexes start at <span class="literal">0</span>, so the index of the first character in a string is <span class="literal">0</span>. The index <span class="literal">1</span> is for the second character, the index <span class="literal">2</span> is for the third character, and so on.</p>
<p class="indent">Enter the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">spam = 'Hello'</span><br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">spam[0]</span><br class="calibre9" />'H'<br class="calibre9" /><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-221"></span>&gt;&gt;&gt; <span class="codestrong">spam[1]</span><br class="calibre9" />'e'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">spam[2]</span><br class="calibre9" />'l'</p>
<div class="image"><img src="images/00051.jpeg" alt="Images" class="calibre4" /></div>
<p class="figcap"><a id="calibre_link-374" class="calibre8"></a><em class="calibre7">Figure 3-1: The string <span class="literalcaption">'Hello'</span> and its indexes</em></p>
<p class="indent">Notice that the expression <span class="literal">spam[0]</span> evaluates to the string value <span class="literal">'H'</span>, because <span class="literal">H</span> is the first character in the string <span class="literal">'Hello'</span> and indexes start at <span class="literal">0</span>, not <span class="literal">1</span> (see <a href="#calibre_link-374" class="calibre8">Figure 3-1</a>).</p>
<p class="indent">You can use indexing with a variable containing a string value, as we did with the previous example, or a string value by itself, like this:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">'Zophie'[2]</span><br class="calibre9" />'p'</p>
<p class="indent">The expression <span class="literal">'Zophie'[2]</span> evaluates to the third string value, which is a <span class="literal">'p'</span>. This <span class="literal">'p'</span> string is just like any other string value and can be stored in a variable. Enter the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">eggs = 'Zophie'[2]</span><br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">eggs</span><br class="calibre9" />'p'</p>
<p class="indent">If you enter an index that is too large for the string, Python displays an <span class="literal">"index out of range"</span> error message, as you can see in the following code:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">'Hello'[10]</span><br class="calibre9" />Traceback (most recent call last):<br class="calibre9" />&nbsp;&nbsp;File "&lt;stdin&gt;", line 1, in &lt;module&gt;<br class="calibre9" />IndexError: string index out of range</p>
<p class="indent">There are five characters in the string <span class="literal">'Hello'</span>, so if you try to use the index <span class="literal">10</span>, Python displays an error.</p>
<div class="image"><img src="images/00052.jpeg" alt="Images" class="calibre4" /></div>
<p class="figcap"><a id="calibre_link-375" class="calibre8"></a><em class="calibre7">Figure 3-2: The string <span class="literalcaption">'Hello'</span> and its negative indexes</em></p>
<h5 class="h3"><strong class="calibre3">Negative Indexes</strong></h5>
<p class="noindent"><em class="calibre7">Negative indexes</em> start at the end of a string and go backward. The negative index <span class="literal">-1</span> is the index of the <em class="calibre7">last</em> character in a string. The index <span class="literal">-2</span> is the index of the second to last character, and so on, as shown in <a href="#calibre_link-375" class="calibre8">Figure 3-2</a>.</p>
<p class="indent">Enter the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">'Hello'[-1]</span><br class="calibre9" />'o'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'Hello'[-2]</span><br class="calibre9" />'l'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'Hello'[-3]</span><br class="calibre9" />'l'<br class="calibre9" /><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-81"></span>&gt;&gt;&gt; <span class="codestrong">'Hello'[-4]</span><br class="calibre9" />'e'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'Hello'[-5]</span><br class="calibre9" />'H'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'Hello'[0]</span><br class="calibre9" />'H'</p>
<p class="indent">Notice that <span class="literal">-5</span> and <span class="literal">0</span> are the indexes for the same character. Most of the time, your code will use positive indexes, but sometimes it’s easier to use negative ones.</p>
<h5 class="h3"><strong class="calibre3">Getting Multiple Characters from Strings Using Slices</strong></h5>
<p class="noindent">If you want to get more than one character from a string, you can use slicing instead of indexing. A <em class="calibre7">slice</em> also uses the <span class="literal">[</span> and <span class="literal">]</span> square brackets but has two integer indexes instead of one. The two indexes are separated by a colon (<span class="literal">:</span>) and tell Python the index of the first and last characters in the slice. Enter the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">'Howdy'[0:3]</span><br class="calibre9" />'How'</p>
<p class="indent">The string that the slice evaluates to begins at the first index value and goes up to, but does not include, the second index value. Index <span class="literal">0</span> of the string value <span class="literal">'Howdy'</span> is <span class="literal">H</span> and index <span class="literal">3</span> is <span class="literal">d</span>. Because a slice goes up to but does not include the second index, the slice <span class="literal">'Howdy'[0:3]</span> evaluates to the string value <span class="literal">'How'</span>.</p>
<p class="indent">Enter the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">'Hello, world!'[0:5]</span><br class="calibre9" />'Hello'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'Hello, world!'[7:13]</span><br class="calibre9" />'world!'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'Hello, world!'[-6:-1]</span><br class="calibre9" />'world'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'Hello, world!'[7:13][2]</span><br class="calibre9" />'r'</p>
<p class="indent">Notice that the expression <span class="literal">'Hello, world!'[7:13][2]</span> first evaluates the list slice to <span class="literal">'world!'[2]</span> and then further evaluates to <span class="literal">'r'</span>.</p>
<p class="indent">Unlike indexes, slicing never gives you an error if you give too large an index for the string. It’ll just return the widest matching slice it can:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">'Hello'[0:999]</span><br class="calibre9" />'Hello'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'Hello'[2:999]</span><br class="calibre9" />'llo'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'Hello'[1000:2000]</span><br class="calibre9" />''</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-259"></span>The expression <span class="literal">'Hello'[1000:2000]</span> returns a blank string because the index <span class="literal">1000</span> is after the end of the string, so there are no possible characters this slice could include. Although our examples don’t show this, you can also slice strings stored in variables.</p>
<h5 class="h3"><strong class="calibre3">Blank Slice Indexes</strong></h5>
<p class="noindent">If you omit the first index of a slice, Python will automatically use index <span class="literal">0</span> for the first index. The expressions <span class="literal">'Howdy'[0:3]</span> and <span class="literal">'Howdy'[:3]</span> evaluate to the same string:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">'Howdy'[:3]</span><br class="calibre9" />'How'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'Howdy'[0:3]</span><br class="calibre9" />'How'</p>
<p class="indent">If you omit the second index, Python will automatically use the rest of the string starting from the first index:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">'Howdy'[2:]</span><br class="calibre9" />'wdy'</p>
<p class="indent">You can use blank indexes in many different ways. Enter the following into the shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">myName = 'Zophie the Fat Cat'</span><br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">myName[-7:]</span><br class="calibre9" />'Fat Cat'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">myName[:10]</span><br class="calibre9" />'Zophie the'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">myName[7:]</span><br class="calibre9" />'the Fat Cat'</p>
<p class="indent">As you can see, you can even use negative indexes with a blank index. Because <span class="literal">-7</span> is the starting index in the first example, Python counts backward seven characters from the end and uses that as its starting index. Then it returns everything from that index to the end of the string because of the second blank index.</p>
<h3 class="h1" id="calibre_link-470"><strong class="calibre3">Printing Values with the print() Function</strong></h3>
<p class="noindent">Let’s try another type of Python instruction: a <span class="literal">print()</span> function call. Enter the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">print('Hello!')</span><br class="calibre9" />Hello!<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">print(42)</span><br class="calibre9" />42</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-79"></span>A <em class="calibre7">function</em> (like <span class="literal">print()</span> in this example) has code inside it that performs a task, such as printing values onscreen. Many different functions come with Python and can perform useful tasks for you. To <em class="calibre7">call</em> a function means to execute the code inside the function.</p>
<p class="indent">The instructions in this example pass a value to <span class="literal">print()</span> between the parentheses, and the <span class="literal">print()</span> function prints the value to the screen. The values that are passed when a function is called are <em class="calibre7">arguments</em>. When you write programs, you’ll use <span class="literal">print()</span> to make text appear on the screen.</p>
<p class="indent">You can pass an expression to <span class="literal">print()</span> instead of a single value. This is because the value that is actually passed to <span class="literal">print()</span> is the evaluated value of that expression. Enter this string concatenation expression into the inter&shy;active shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">spam = 'Al'</span><br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">print('Hello, ' + spam)</span><br class="calibre9" />Hello, Al</p>
<p class="indent">The <span class="literal">'Hello, ' + spam</span> expression evaluates to <span class="literal">'Hello, ' + 'Al'</span>, which then evaluates to the string value <span class="literal">'Hello, Al'</span>. This string value is what is passed to the <span class="literal">print()</span> call.</p>
<h3 class="h1" id="calibre_link-471"><strong class="calibre3">Printing Escape Characters</strong></h3>
<p class="noindent">You might want to use a character in a string value that would confuse Python. For example, you might want to use a single quote character as part of a string. But you’d get an error message because Python thinks that single quote is the quote ending the string value and the text after it is bad Python code, instead of the rest of the string. Enter the following into the interactive shell to see the error in action:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">print('Al's cat is named Zophie.')</span><br class="calibre9" />SyntaxError: invalid syntax</p>
<p class="indent">To use a single quote in a string, you need to use an <em class="calibre7">escape character</em>. An escape character is a backslash character followed by another character&mdash;for example, <span class="literal">\t</span>, <span class="literal">\n</span>, or <span class="literal">\'</span>. The slash tells Python that the character after the slash has a special meaning. Enter the following into the interactive shell.</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">print('Al\'s cat is named Zophie.')</span><br class="calibre9" />Al's cat is named Zophie.</p>
<p class="indent">Now Python will know the apostrophe is a character in the string value, not Python code marking the end of the string.</p>
<p class="indent"><a href="#calibre_link-376" class="calibre8">Table 3-1</a> shows some escape characters you can use in Python.</p>
<p class="tabcap"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-80"></span><a id="calibre_link-376" class="calibre8"></a><strong class="calibre5">Table 3-1:</strong> Escape Characters</p>
<table class="topbot">
<thead class="calibre16">
<tr class="table_w">
<td class="table_th"><p class="table"><strong class="calibre5">Escape character</strong></p></td>
<td class="table_th"><p class="table"><strong class="calibre5">Printed result</strong></p></td>
</tr>
</thead>
<tbody class="calibre17">
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">\\</span></p></td>
<td class="calibre18"><p class="table">Backslash (<span class="literal">\</span>)</p></td>
</tr>
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">\'</span></p></td>
<td class="calibre18"><p class="table">Single quote (<span class="literal">'</span>)</p></td>
</tr>
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">\"</span></p></td>
<td class="calibre18"><p class="table">Double quote (<span class="literal">"</span>)</p></td>
</tr>
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">\n</span></p></td>
<td class="calibre18"><p class="table">Newline</p></td>
</tr>
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">\t</span></p></td>
<td class="calibre18"><p class="table">Tab</p></td>
</tr></tbody></table>
<p class="indent">The backslash always precedes an escape character. Even if you just want a backslash in your string, you can’t add a backslash alone because Python will interpret the next character as an escape character. For example, this line of code wouldn’t work correctly:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">print('It is a green\teal color.')</span><br class="calibre9" />It is a green&nbsp;&nbsp;&nbsp;&nbsp;eal color.</p>
<p class="indent">The <span class="literal">'t'</span> in <span class="literal">'teal'</span> is identified as an escape character because it comes after a backslash. The escape character <span class="literal">\t</span> simulates pushing the <small class="calibre14">tab</small> key on your keyboard.</p>
<p class="indent">Instead, enter this code:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">print('It is a green\\teal color.')</span><br class="calibre9" />It is a green\teal color.</p>
<p class="indent">This time the string will print as you intended, because putting a second backslash in the string makes the backslash the escape character.</p>
<h3 class="h1" id="calibre_link-472"><strong class="calibre3">Quotes and Double Quotes</strong></h3>
<p class="noindent">Strings don’t always have to be between two single quotes in Python. You can use double quotes instead. These two lines print the same thing:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">print('Hello, world!')</span><br class="calibre9" />Hello, world!<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">print("Hello, world!")</span><br class="calibre9" />Hello, world!</p>
<p class="indent">But you can’t mix single and double quotes. This line gives you an error:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">print('Hello, world!")</span><br class="calibre9" />SyntaxError: EOL while scanning string literal</p>
<p class="indent">I prefer to use single quotes because they’re a bit easier to type than double quotes and Python doesn’t care either way.</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-82"></span>But just like you have to use the escape character <span class="literal">\'</span> to have a single quote in a string surrounded by single quotes, you need the escape character <span class="literal">\"</span> to have a double quote in a string surrounded by double quotes. For example, look at these two lines:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">print('Al\'s cat is Zophie. She says, "Meow."')</span><br class="calibre9" />Al's cat is Zophie. She says, "Meow."<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">print("Zophie said, \"I can say things other than 'Meow' you know.\"")</span><br class="calibre9" />Zophie said, "I can say things other than 'Meow' you know."</p>
<p class="indent">You don’t need to escape double quotes in single-quote strings, and you don’t need to escape single quotes in double-quote strings. The Python interpreter is smart enough to know that if a string starts with one kind of quote, the other kind of quote doesn’t mean the string is ending.</p>
<h3 class="h1" id="calibre_link-473"><strong class="calibre3">Writing Programs in IDLE’s File Editor</strong></h3>
<p class="noindent">Until now, you’ve been entering instructions one at a time into the inter&shy;active shell. But when you write programs, you’ll enter several instructions and have them run without waiting on you for the next one. It’s time to write your first program!</p>
<p class="indent">The name of the software program that provides the interactive shell is called IDLE (<strong class="calibre5">I</strong>ntegrated <strong class="calibre5">D</strong>eve<strong class="calibre5">L</strong>opment <strong class="calibre5">E</strong>nvironment). In addition to the interactive shell, IDLE also has a <em class="calibre7">file editor</em>, which we’ll open now.</p>
<p class="indent">At the top of the Python shell window, select <strong class="calibre5">File</strong><span class="ent">▸</span><strong class="calibre5">New Window</strong>. A new blank window, the file editor, will appear for you to enter a program, as shown in <a href="#calibre_link-377" class="calibre8">Figure 3-3</a>. The bottom-right corner of the file editor window shows you what line and column the cursor currently is on.</p>
<div class="image"><img src="images/00053.jpeg" alt="Images" class="calibre4" /></div>
<p class="figcap"><a id="calibre_link-377" class="calibre8"></a><em class="calibre7">Figure 3-3: The file editor window with the cursor at line 1, column 0</em></p>
<p class="indent">You can tell the difference between the file editor window and the interactive shell window by looking for the <span class="literal">&gt;&gt;&gt;</span> prompt. The interactive shell always displays the prompt, and the file editor doesn’t.</p>
<h3 class="h1" id="calibre_link-474"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-205" class="calibre1"></span>Source Code for the “Hello, World!” Program</h3>
<p class="noindent">Traditionally, programmers who are learning a new language make their first program display the text <span class="literal">"Hello, world!"</span> on the screen. We’ll create our own “Hello, world!” program next by entering text into the new file editor window. We call this text the program’s <em class="calibre7">source code</em> because it contains the instructions that Python will follow to determine exactly how the program should behave.</p>
<p class="indent">You can download the “Hello, world!” source code from <a href="https://www.nostarch.com/crackingcodes" class="calibre8"><em class="calibre7">https://www.nostarch.com/crackingcodes/</em></a>. If you get errors after entering this code, compare it to the book’s code using the online diff tool (see “<a href="#calibre_link-378" class="calibre8">Checking Your Source Code with the Online Diff Tool</a>” next). Remember that you don’t type the line numbers; they only appear in this book to aid explanation.</p>
<p class="indent"><em class="calibre7">hello.py</em></p>
<p class="programs1">1. # This program says hello and asks for my name.<br class="calibre9" />2. print('Hello, world!')<br class="calibre9" />3. print('What is your name?')<br class="calibre9" />4. myName = input()<br class="calibre9" />5. print('It is good to meet you, ' + myName)</p>
<p class="indent">The IDLE program will display different types of instructions in different colors. When you’re done entering this code, the window should look like <a href="#calibre_link-379" class="calibre8">Figure 3-4</a>.</p>
<div class="image"><img src="images/00054.jpeg" alt="Images" class="calibre4" /></div>
<p class="figcap"><a id="calibre_link-379" class="calibre8"></a><em class="calibre7">Figure 3-4: The file editor window will look like this after you enter the code.</em></p>
<h3 class="h1" id="calibre_link-378">Checking Your Source Code with the Online Diff Tool</h3>
<p class="noindent">Even though you could copy and paste or download the <em class="calibre7">hello.py</em> code from this book’s website, you should still type this program manually. Doing so will give you more familiarity with the code in the program. However, you might make some mistakes while typing it into the file editor.</p>
<p class="indent">To compare the code you typed to the code in this book, use the online diff tool shown in <a href="#calibre_link-380" class="calibre8">Figure 3-5</a>. Copy the text of your code and then navigate to the diff tool on the book’s website at <a href="https://www.nostarch.com/crackingcodes/" class="calibre8"><em class="calibre7">https://www.nostarch.com/crackingcodes/</em></a>. Select the <em class="calibre7">hello.py</em> program from the drop-down menu. Paste your code into the text field on this web page and click the <strong class="calibre5">Compare</strong> button. The diff tool shows any differences between your code and the code in this book. This is an easy way to find any typos causing errors in your program.</p>
<div class="image"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-206"></span><img src="images/00055.jpeg" alt="Images" class="calibre4" /></div>
<p class="figcap"><a id="calibre_link-380" class="calibre8"></a><em class="calibre7">Figure 3-5: The online diff tool</em></p>
<h3 class="h1" id="calibre_link-475">Using IDLE to Access Your Program Later</h3>
<p class="noindent">When you write programs, you might want to save them and come back to them later, especially after you’ve typed a very long program. IDLE has features for saving and opening programs just like a word processer has features to save and reopen your documents.</p>
<h4 class="h2" id="calibre_link-476"><strong class="calibre3"><em class="calibre12">Saving Your Program</em></strong></h4>
<p class="noindent">After you’ve entered your source code, save it so you won’t have to retype it each time you want to run it. Choose <strong class="calibre5">File</strong><span class="ent">▸</span><strong class="calibre5">Save As</strong> from the menu at the top of the file editor window. The Save As dialog should open, as shown in <a href="#calibre_link-381" class="calibre8">Figure 3-6</a>. Enter <span class="codestrong">hello.py</span> in the <strong class="calibre5">File Name</strong> field and click <strong class="calibre5">Save</strong>.</p>
<div class="image"><img src="images/00057.jpeg" alt="Images" class="calibre4" /></div>
<p class="figcap"><a id="calibre_link-381" class="calibre8"></a><em class="calibre7">Figure 3-6: Saving the program</em></p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-223"></span>You should save your programs often as you type them so you won’t lose your work if the computer crashes or if you accidentally exit from IDLE. As a shortcut, you can press <small class="calibre14">ctrl</small>-S on Windows and Linux or <img class="inline" src="images/00059.jpeg" alt="Images" />-S on macOS to save your file.</p>
<h4 class="h2" id="calibre_link-477"><strong class="calibre3"><em class="calibre12">Running Your Program</em></strong></h4>
<p class="noindent">Now it’s time to run your program. Select <strong class="calibre5">Run</strong><span class="ent">▸</span><strong class="calibre5">Run Module</strong> or just press the F5 key on your keyboard. Your program should run in the shell window that appeared when you first started IDLE. Remember that you must press F5 from the file editor’s window, not the interactive shell’s window.</p>
<p class="indent">When the program asks for your name, enter it, as shown in <a href="#calibre_link-382" class="calibre8">Figure 3-7</a>.</p>
<div class="image"><img src="images/00060.jpeg" alt="Images" class="calibre4" /></div>
<p class="figcap"><a id="calibre_link-382" class="calibre8"></a><em class="calibre7">Figure 3-7: The interactive shell looks like this when running the “Hello, world!” program.</em></p>
<p class="indent">Now when you press <small class="calibre14">enter</small>, the program should greet you (the <em class="calibre7">user</em>, that is, the one using the program) by name. Congratulations! You’ve written your first program. You are now a beginning computer programmer. (If you like, you can run this program again by pressing F5 again.)</p>
<p class="indent">If instead you get an error that looks like this, it means you are running the program with Python 2 instead of Python 3:</p>
<p class="programs1">Hello, world!<br class="calibre9" />What is your name?<br class="calibre9" /><span class="codestrong">Albert</span><br class="calibre9" />Traceback (most recent call last):<br class="calibre9" />&nbsp;&nbsp;File "C:/Python27/hello.py", line 4, in &lt;module&gt;<br class="calibre9" />&nbsp;&nbsp;&nbsp;&nbsp;myName = input()<br class="calibre9" />&nbsp;&nbsp;File "&lt;string&gt;", line 1, in &lt;module&gt;<br class="calibre9" />NameError: name 'Albert' is not defined</p>
<p class="indent">The error is caused by the <span class="literal">input()</span> function call, which behaves differently in Python 2 and 3. Before continuing, install Python 3 by following the instructions in “<a href="#calibre_link-55" class="calibre8">Downloading and Installing Python</a>” on <a href="#calibre_link-55" class="calibre8">page xxv</a>.</p>
<h4 class="h2" id="calibre_link-478"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-88" class="calibre1"></span><strong class="calibre3"><em class="calibre12">Opening the Programs You’ve Saved</em></strong></h4>
<p class="noindent">Close the file editor by clicking the X in the top corner. To reload a saved program, choose <strong class="calibre5">File</strong><span class="ent">▸</span><strong class="calibre5">Open</strong> from the menu. Do that now, and in the window that appears, choose <em class="calibre7">hello.py</em>. Then click the <strong class="calibre5">Open</strong> button. Your saved <em class="calibre7">hello.py</em> program should open in the file editor window.</p>
<h3 class="h1" id="calibre_link-479"><strong class="calibre3">How the “Hello, World!” Program Works</strong></h3>
<p class="noindent">Each line in the “Hello, world!” program is an instruction that tells Python exactly what to do. A computer program is a lot like a recipe. Do the first step first, then the second, and so on until you reach the end. When the program follows instructions step-by-step, we call it the <em class="calibre7">program execution</em>, or just the <em class="calibre7">execution</em>.</p>
<p class="indent">Each instruction is followed in sequence, beginning from the top of the program and working down the list of instructions. The execution starts at the first line of code and then moves downward. But the execution can also skip around instead of just going from top to bottom; you’ll find out how to do this in <a href="#calibre_link-57" class="calibre8">Chapter 4</a>.</p>
<p class="indent">Let’s look at the “Hello, world!” program one line at a time to see what it’s doing, beginning with line 1.</p>
<h4 class="h2" id="calibre_link-480"><strong class="calibre3"><em class="calibre12">Comments</em></strong></h4>
<p class="noindent">Any text following a <em class="calibre7">hash mark</em> (<span class="literal">#</span>) is a comment:</p>
<p class="programs1">1. # This program says hello and asks for my name.</p>
<p class="indent">Comments are not for the computer but instead are for you, the programmer. The computer ignores them. They’re used to remind you what the program does or to tell others who might look at your code what your code does.</p>
<p class="indent">Programmers usually put a comment at the top of their code to give the program a title. The IDLE program displays comments in red text to help them stand out. Sometimes, programmers will put a <span class="literal">#</span> in front of a line of code to temporarily skip it while testing a program. This is called <em class="calibre7">commenting out</em> code, and it can be useful when you’re trying to figure out why a program doesn’t work. You can remove the <span class="literal">#</span> later when you’re ready to put the line back in.</p>
<h4 class="h2" id="calibre_link-481"><strong class="calibre3"><em class="calibre12">Printing Directions to the User</em></strong></h4>
<p class="noindent">The next two lines display directions to the user with the <span class="literal">print()</span> function. A function is like a mini-program inside your program. The great benefit of using functions is that we only need to know what the function does, not how it does it. For instance, you need to know that <span class="literal">print()</span> displays text onscreen, but you don’t need to know the exact code inside the function that does this. <span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-92"></span>A function call is a piece of code that tells the program to run the code inside a function.</p>
<p class="indent">Line 2 of <em class="calibre7">hello.py</em> is a call to <span class="literal">print()</span> (with the string to be printed inside the parentheses). Line 3 is another <span class="literal">print()</span> call. This time the program displays <span class="literal">'What is your name?'</span></p>
<p class="programs1">2. print('Hello, world!')<br class="calibre9" />3. print('What is your name?')</p>
<p class="indent">We add parentheses to the end of function names to make it clear that we’re referring to a function named <span class="literal">print()</span>, not a variable named <span class="literal">print</span>. The parentheses at the end of the function tell Python we’re using a function, much as the quotes around the number <span class="literal">'42'</span> tell Python that we’re using the string <span class="literal">'42'</span>, not the integer <span class="literal">42</span>.</p>
<h4 class="h2" id="calibre_link-482"><strong class="calibre3"><em class="calibre12">Taking a User’s Input</em></strong></h4>
<p class="noindent">Line 4 has an assignment statement with a variable (<span class="literal">myName</span>) and the new function call <span class="literal">input()</span>:</p>
<p class="programs1">4. myName = input()</p>
<p class="indent">When <span class="literal">input()</span> is called, the program waits for the user to type in some text and press <small class="calibre14">enter</small>. The text string that the user enters (their name) becomes the string value that is stored in <span class="literal">myName</span>.</p>
<p class="indent">Like expressions, function calls evaluate to a single value. The value that the call evaluates to is called the <em class="calibre7">return value</em>. (In fact, we can also use the word “returns” to mean the same thing as “evaluates” for function calls.) In this case, the return value of <span class="literal">input()</span> is the string that the user entered, which should be their name. If the user entered <span class="literal">Albert</span>, the <span class="literal">input()</span> call evaluates to (that is, returns) the string <span class="literal">'Albert'</span>.</p>
<p class="indent">Unlike <span class="literal">print()</span>, the <span class="literal">input()</span> function doesn’t need any arguments, which is why there is nothing between the parentheses.</p>
<p class="indent">The last line of the code in <em class="calibre7">hello.py</em> is another <span class="literal">print()</span> call:</p>
<p class="programs1">5. print('It is good to meet you, ' + myName)</p>
<p class="indent">For line 5’s <span class="literal">print()</span> call, we use the plus operator (<span class="literal">+</span>) to concatenate the string <span class="literal">'It is good to meet you, '</span> and the string stored in the <span class="literal">myName</span> variable, which is the name that the user input into the program. This is how we get the program to greet the user by name.</p>
<h4 class="h2" id="calibre_link-483"><strong class="calibre3"><em class="calibre12">Ending the Program</em></strong></h4>
<p class="noindent">When the program executes the last line, it stops. At this point it has <em class="calibre7">terminated</em> or <em class="calibre7">exited</em>, and all the variables are forgotten by the computer, including the string stored in <span class="literal">myName</span>. If you try running the program again and entering a different name, it will print that name.</p>
<span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-228"></span>
<p class="programs1">Hello, world!<br class="calibre9" />What is your name?<br class="calibre9" /><span class="codestrong">Zophie</span><br class="calibre9" />It is good to meet you, Zophie</p>
<p class="indent">Remember that the computer only does exactly what you program it to do. In this program, it asks you for your name, lets you enter a string, and then says hello and displays the string you entered.</p>
<p class="indent">But computers are dumb. The program doesn’t care if you enter your name, someone else’s name, or just something silly. You can type in anything you want, and the computer will treat it the same way:</p>
<p class="programs1">Hello, world!<br class="calibre9" />What is your name?<br class="calibre9" /><span class="codestrong">poop</span><br class="calibre9" />It is good to meet you, poop</p>
<h3 class="h1" id="calibre_link-484"><strong class="calibre3">Summary</strong></h3>
<p class="noindent">Writing programs is just about knowing how to speak the computer’s language. You learned a bit about how to do this in <a href="#calibre_link-11" class="calibre8">Chapter 2</a>, and now you’ve put together several Python instructions to make a complete program that asks for the user’s name and greets that user.</p>
<p class="indent">In this chapter, you learned several new techniques to manipulate strings, like using the <span class="literal">+</span> operator to concatenate strings. You can also use indexing and slicing to create a new string from part of a different string.</p>
<p class="indent">The rest of the programs in this book will be more complex and sophisticated, but they’ll all be explained line by line. You can always enter instructions into the interactive shell to see what they do before you put them into a complete program.</p>
<p class="indent">Next, we’ll start writing our first encryption program: the reverse cipher.</p>
<div class="sidebar">
<p class="sidebart" id="calibre_link-485"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-901"></span><strong class="calibre5">PRACTICE QUESTIONS</strong></p>
<p class="noindent">Answers to the practice questions can be found on the book’s website at <em class="calibre7"><a href="https://www.nostarch.com/crackingcodes/" class="calibre8">https://www.nostarch.com/crackingcodes/</a></em>.</p>
<ol class="calibre13">
<li value="1" class="calibre11"><p class="noindent">If you assign <span class="literal">spam = 'Cats'</span>, what do the following lines print?</p>
<p class="programs1">spam + spam + spam<br class="calibre9" />spam * 3</p>
</li>
<li value="2" class="calibre11"><p class="noindent">What do the following lines print?</p>
<p class="programs1">print("Dear Alice,\nHow are you?\nSincerely,\nBob")<br class="calibre9" />print('Hello' + 'Hello')</p>
</li>
<li value="3" class="calibre11"><p class="noindent">If you assign <span class="literal">spam = 'Four score and seven years is eighty seven years.'</span>, what would each of the following lines print?</p>
<p class="programs1">print(spam[5])<br class="calibre9" />print(spam[-3])<br class="calibre9" />print(spam[0:4] + spam[5])<br class="calibre9" />print(spam[-3:-1])<br class="calibre9" />print(spam[:10])<br class="calibre9" />print(spam[-5:])<br class="calibre9" />print(spam[:])</p>
</li>
<li value="4" class="calibre11"><p class="noindent">Which window displays the <span class="literal">&gt;&gt;&gt;</span> prompt, the interactive shell or the file editor?</p></li>
<li value="5" class="calibre11"><p class="noindent">What does the following line print?</p>
<p class="programs1">#print('Hello, world!')</p>
</li>
</ol>
<span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-902"></span>
</div>
</div>
