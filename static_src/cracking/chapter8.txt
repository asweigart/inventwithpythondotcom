


<div><a target="_blank" href="https://www.amazon.com/gp/product/1593278225/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1593278225&linkCode=as2&tag=playwithpyth-20&linkId=bf3b22819f0886d277e88b8a653b81ad">
<img src="images/cover_crackingcodes_thumb.png" /><br />Buy the print or ebook online.</a></div>
<div><a href="chapter7.html">Previous Chapter - Encrypting with the Transposition Cipher</a> | <a href="chapter9.html">Next Chapter - Programming a Program to Test Your Program</a></div>
<div id="calibre_link-390" class="calibre">
<h2 class="h2a1" id="calibre_link-26"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-918" class="calibre1"></span><span class="big">8</span><br class="calibre15" />DECRYPTING WITH THE TRANSPOSITION CIPHER</h2>
<p class="epigraph"><em class="calibre7">“Weakening encryption or creating backdoors to encrypted devices and data for use by the good guys would actually create vulnerabilities to be exploited by the bad guys.”<br class="calibre9" />&mdash;Tim Cook, CEO of Apple, 2015</em></p>
<div class="image"><img src="images/00078.jpeg" alt="Images" class="calibre4" /></div>
<p class="noindent">Unlike the Caesar cipher, the decryption process for the transposition cipher is different from the encryption process. In this chapter, you’ll create a separate program named <em class="calibre7">transpositionDecrypt.py</em> to handle decryption.</p>
<div class="sidebar">
<p class="sidebart"><strong class="calibre5">TOPICS COVERED IN THIS CHAPTER</strong></p>
<ul class="calibre10">
<li class="calibre11"><p class="noindent">Decrypting with the transposition cipher</p></li>
<li class="calibre11"><p class="noindent">The <span class="literal">round()</span>, <span class="literal">math.ceil()</span>, and <span class="literal">math.floor()</span> functions</p></li>
<li class="calibre11"><p class="noindent">The <span class="literal">and</span> and <span class="literal">or</span> Boolean operators</p></li>
<li class="calibre11"><p class="noindent">Truth tables</p></li>
</ul>
</div>
<h3 class="h1" id="calibre_link-550"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-193" class="calibre1"></span><strong class="calibre3">How to Decrypt with the Transposition Cipher on Paper</strong></h3>
<p class="noindent">Pretend you’ve sent the ciphertext “Cenoonommstmme oo snnio. s s c” to a friend (and they already know that the secret key is 8). The first step for them to decrypt the ciphertext is to calculate the number of boxes they need to draw. To determine this number, they must divide the length of the ciphertext message by the key and round up to the nearest whole number if the result isn’t already a whole number. The length of the ciphertext is 30 characters (the same as the plaintext) and the key is 8, so 30 divided by 8 is 3.75.</p>
<div class="image"><img src="images/00075.jpeg" alt="Images" class="calibre4" /></div>
<p class="figcap"><a id="calibre_link-391" class="calibre8"></a><em class="calibre7">Figure 8-1: Decrypting the message by reversing the grid</em></p>
<p class="indent">Rounding up 3.75 to 4, your friend will draw a grid of boxes with four columns (the number they just calculated) and eight rows (the key).</p>
<p class="indent">Your friend also needs to calculate the number of boxes to shade in. Using the total number of boxes (32), they subtract the length of the ciphertext (which is 30): 32 &ndash; 30 = 2. They shade in the <em class="calibre7">bottom</em> two boxes in the <em class="calibre7">rightmost</em> column.</p>
<p class="indent">Then they start filling in the boxes, placing one character of the ciphertext in each box. Starting at the top left, they fill in toward the right, as you did when you were encrypting. The ciphertext is “Cenoonommstmme oo snnio. s s c”, so “Ceno” goes in the first row, “onom” goes in the second row, and so on. When they’re done, the boxes will look like <a href="#calibre_link-391" class="calibre8">Figure 8-1</a> (a <span class="ent">▪</span> represents a space).</p>
<p class="indent">Your friend who received the ciphertext notices that when they read the text going down the columns, the original plaintext is restored: “Common sense is not so common.”</p>
<p class="indent">To recap, the steps for decrypting are as follows:</p>
<ol class="calibre13">
<li value="1" class="calibre11"><p class="noindent">Calculate the number of columns you need by dividing the length of the message by the key and then rounding up.</p></li>
<li value="2" class="calibre11"><p class="noindent">Draw boxes in columns and rows. Use the number of columns you calculated in step 1. The number of rows is the same as the key.</p></li>
<li value="3" class="calibre11"><p class="noindent">Calculate the number of boxes to shade in by taking the total number of boxes (the number of rows multiplied by the number of columns) and subtracting the length of the ciphertext message.</p></li>
<li value="4" class="calibre11"><p class="noindent">Shade in the number of boxes you calculated in step 3 at the bottom of the rightmost column.</p></li>
<li value="5" class="calibre11"><p class="noindent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-194"></span>Fill in the characters of the ciphertext starting at the top row and going from left to right. Skip any of the shaded boxes.</p></li>
<li value="6" class="calibre11"><p class="noindent">Get the plaintext by reading the leftmost column from top to bottom, and continuing to do the same in each column.</p></li>
</ol>
<p class="indent">Note that if you used a different key, you’d draw the wrong number of rows. Even if you followed the other steps in the decryption process correctly, the plaintext would be random garbage (similar to if you used the wrong key with the Caesar cipher).</p>
<h3 class="h1" id="calibre_link-551"><strong class="calibre3">Source Code for the Transposition Cipher Decryption Program</strong></h3>
<p class="noindent">Open a new file editor window by clicking <strong class="calibre5">File</strong><span class="ent">▸</span><strong class="calibre5">New File</strong>. Enter the following code into the file editor and then save it as <em class="calibre7">transpositionDecrypt.py</em>. Remember to place <em class="calibre7">pyperclip.py</em> in the same directory. Press F5 to run the program.</p>
<p class="noindentz"><em class="calibre7">transposition<br class="calibre9" />Decrypt.py</em></p>
<p class="programs1">&nbsp;1. # Transposition Cipher Decryption<br class="calibre9" />&nbsp;2. # https://www.nostarch.com/crackingcodes/ (BSD Licensed)<br class="calibre9" />&nbsp;3.<br class="calibre9" />&nbsp;4. import math, pyperclip<br class="calibre9" />&nbsp;5.<br class="calibre9" />&nbsp;6. def main():<br class="calibre9" />&nbsp;7.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myMessage = 'Cenoonommstmme oo snnio. s s c'<br class="calibre9" />&nbsp;8.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myKey = 8<br class="calibre9" />&nbsp;9.<br class="calibre9" />10.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plaintext = decryptMessage(myKey, myMessage)<br class="calibre9" />11.<br class="calibre9" />12.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Print with a | (called "pipe" character) after it in case<br class="calibre9" />13.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# there are spaces at the end of the decrypted message:<br class="calibre9" />14.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(plaintext + '|')<br class="calibre9" />15.<br class="calibre9" />16.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pyperclip.copy(plaintext)<br class="calibre9" />17.<br class="calibre9" />18.<br class="calibre9" />19. def decryptMessage(key, message):<br class="calibre9" />20.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# The transposition decrypt function will simulate the "columns" and<br class="calibre9" />21.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# "rows" of the grid that the plaintext is written on by using a list<br class="calibre9" />22.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# of strings. First, we need to calculate a few values.<br class="calibre9" />23.<br class="calibre9" />24.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# The number of "columns" in our transposition grid:<br class="calibre9" />25.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numOfColumns = int(math.ceil(len(message) / float(key)))<br class="calibre9" />26.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# The number of "rows" in our grid:<br class="calibre9" />27.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numOfRows = key<br class="calibre9" />28.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# The number of "shaded boxes" in the last "column" of the grid:<br class="calibre9" />29.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numOfShadedBoxes = (numOfColumns * numOfRows) - len(message)<br class="calibre9" />30.<br class="calibre9" />31.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Each string in plaintext represents a column in the grid:<br class="calibre9" />32.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plaintext = [''] * numOfColumns<br class="calibre9" />33.<br class="calibre9" /><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-283"></span>34.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# The column and row variables point to where in the grid the next<br class="calibre9" />35.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# character in the encrypted message will go:<br class="calibre9" />36.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column = 0<br class="calibre9" />37.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row = 0<br class="calibre9" />38.<br class="calibre9" />39.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for symbol in message:<br class="calibre9" />40.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plaintext[column] += symbol<br class="calibre9" />41.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column += 1 # Point to the next column.<br class="calibre9" />42.<br class="calibre9" />43.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# If there are no more columns OR we're at a shaded box, go back<br class="calibre9" />44.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# to the first column and the next row:<br class="calibre9" />45.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (column == numOfColumns) or (column == numOfColumns - 1 and<br class="calibre9" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row &gt;= numOfRows - numOfShadedBoxes):<br class="calibre9" />46.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column = 0<br class="calibre9" />47.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row += 1<br class="calibre9" />48.<br class="calibre9" />49.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ''.join(plaintext)<br class="calibre9" />50.<br class="calibre9" />51.<br class="calibre9" />52. # If transpositionDecrypt.py is run (instead of imported as a module),<br class="calibre9" />53. # call the main() function:<br class="calibre9" />54. if __name__ == '__main__':<br class="calibre9" />55.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;main()</p>
<h3 class="h1" id="calibre_link-552"><strong class="calibre3">Sample Run of the Transposition Cipher Decryption Program</strong></h3>
<p class="noindent">When you run the <em class="calibre7">transpositionDecrypt.py</em> program, it produces this output:</p>
<p class="programs1">Common sense is not so common.|</p>
<p class="indent">If you want to decrypt a different message or use a different key, change the value assigned to the <span class="literal">myMessage</span> and <span class="literal">myKey</span> variables on lines 7 and 8.</p>
<h3 class="h1" id="calibre_link-553"><strong class="calibre3">Importing Modules and Setting Up the main() Function</strong></h3>
<p class="noindent">The first part of the <em class="calibre7">transpositionDecrypt.py</em> program is similar to the first part of <em class="calibre7">transpositionEncrypt.py</em>:</p>
<p class="programs1">&nbsp;1. # Transposition Cipher Decryption<br class="calibre9" />&nbsp;2. # https://www.nostarch.com/crackingcodes/ (BSD Licensed)<br class="calibre9" />&nbsp;3.<br class="calibre9" />&nbsp;4. import math, pyperclip<br class="calibre9" />&nbsp;5.<br class="calibre9" />&nbsp;6. def main():<br class="calibre9" />&nbsp;7.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myMessage = 'Cenoonommstmme oo snnio. s s c'<br class="calibre9" />&nbsp;8.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myKey = 8<br class="calibre9" />&nbsp;9.<br class="calibre9" />10.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plaintext = decryptMessage(myKey, myMessage)<br class="calibre9" />11.<br class="calibre9" /><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-159"></span>12.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Print with a | (called "pipe" character) after it in case<br class="calibre9" />13.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# there are spaces at the end of the decrypted message:<br class="calibre9" />14.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(plaintext + '|')<br class="calibre9" />15.<br class="calibre9" />16.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pyperclip.copy(plaintext)</p>
<p class="indent">The <span class="literal">pyperclip</span> module is imported along with another module named <span class="literal">math</span> on line 4. If you separate the module names with commas, you can import multiple modules with one <span class="literal">import</span> statement.</p>
<p class="indent">The <span class="literal">main()</span> function, which we start defining on line 6, creates variables named <span class="literal">myMessage</span> and <span class="literal">myKey</span> and then calls the decryption function <span class="literal">decryptMessage</span><span class="literal">()</span>. The return value of <span class="literal">decryptMessage()</span> is the decrypted plaintext of the ciphertext and key. This is stored in a variable named <span class="literal">plaintext</span>, which is printed to the screen (with a pipe character at the end in case there are spaces at the end of the message) and then copied to the clipboard.</p>
<h3 class="h1" id="calibre_link-554"><strong class="calibre3">Decrypting the Message with the Key</strong></h3>
<p class="noindent">The <span class="literal">decryptMessage()</span> function follows the six decrypting steps described on <a href="#calibre_link-193" class="calibre8">page 100</a> and then returns the results of decryption as a string. To make decryption easier, we’ll use functions from the <span class="literal">math</span> module, which we imported earlier in the program.</p>
<h4 class="h2" id="calibre_link-555"><strong class="calibre3"><em class="calibre12">The round(), math.ceil(), and math.floor() Functions</em></strong></h4>
<p class="noindent">Python’s <span class="literal">round()</span> function will round a floating-point number (a number with a decimal point) to the closest integer. The <span class="literal">math.ceil()</span> and <span class="literal">math.floor()</span> functions (in Python’s <span class="literal">math</span> module) will round a number up and down, respectively.</p>
<p class="indent">When you divide numbers using the <span class="literal">/</span> operator, the expression returns a floating-point number (a number with a decimal point). This happens even if the number divides evenly. For example, enter the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">21 / 7</span><br class="calibre9" />3.0<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">22 / 5</span><br class="calibre9" />4.4</p>
<p class="indent">If you want to round a number to the nearest integer, you can use the <span class="literal">round()</span> function. To see how the function works, enter the following:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">round(4.2)</span><br class="calibre9" />4<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">round(4.9)</span><br class="calibre9" />5<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">round(5.0)</span><br class="calibre9" />5<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">round(22 / 5)</span><br class="calibre9" />4</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-160"></span>If you only want to round up, you need to use the <span class="literal">math.ceil()</span> function, which represents “ceiling.” If you only want to round down, use <span class="literal">math.floor()</span>. These functions exist in the <span class="literal">math</span> module, which you need to import before calling them. Enter the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">import math</span><br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">math.floor(4.0)</span><br class="calibre9" />4<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">math.floor(4.2)</span><br class="calibre9" />4<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">math.floor(4.9)</span><br class="calibre9" />4<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">math.ceil(4.0)</span><br class="calibre9" />4<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">math.ceil(4.2)</span><br class="calibre9" />5<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">math.ceil(4.9)</span><br class="calibre9" />5</p>
<p class="indent">The <span class="literal">math.floor()</span> function will always remove the decimal point from the float and convert it to an integer to round down, and <span class="literal">math.ceil()</span> will instead increment the ones place of the float and convert it to an integer to round up.</p>
<h4 class="h2" id="calibre_link-556"><strong class="calibre3"><em class="calibre12">The decryptMessage() Function</em></strong></h4>
<p class="noindent">The <span class="literal">decryptMessage()</span> function implements each of the decryption steps as Python code. It takes an integer <span class="literal">key</span> and a <span class="literal">message</span> string as arguments. The <span class="literal">math.ceil()</span> function is used for the transposition decryption in <span class="literal">decryptMessage</span><span class="literal">()</span> when the columns are calculated to determine the number of boxes that need to be made:</p>
<p class="programs1">19. def decryptMessage(key, message):<br class="calibre9" />20.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# The transposition decrypt function will simulate the "columns" and<br class="calibre9" />21.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# "rows" of the grid that the plaintext is written on by using a list<br class="calibre9" />22.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# of strings. First, we need to calculate a few values.<br class="calibre9" />23.<br class="calibre9" />24.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# The number of "columns" in our transposition grid:<br class="calibre9" />25.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numOfColumns = int(math.ceil(len(message) / float(key)))<br class="calibre9" />26.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# The number of "rows" in our grid:<br class="calibre9" />27.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numOfRows = key<br class="calibre9" />28.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# The number of "shaded boxes" in the last "column" of the grid:<br class="calibre9" />29.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numOfShadedBoxes = (numOfColumns * numOfRows) - len(message)</p>
<p class="indent">Line 25 calculates the number of columns by dividing <span class="literal">len(message)</span> by the integer in <span class="literal">key</span>. This value is passed to the <span class="literal">math.ceil()</span> function, and that return value is stored in <span class="literal">numOfColumns</span>. To make this program compatible with Python 2, we call <span class="literal">float()</span> so the <span class="literal">key</span> becomes a floating-point value. In Python 2, the result of dividing two integers is automatically rounded down. Calling <span class="literal">float()</span> avoids this behavior without affecting the behavior under Python 3.</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-919"></span>Line 27 calculates the number of rows, which is the integer stored in <span class="literal">key</span>. This value gets stored in the variable <span class="literal">numOfRows</span>.</p>
<p class="indent">Line 29 calculates the number of shaded boxes in the grid, which is the number of columns times rows, minus the length of the message.</p>
<p class="indent">If you’re decrypting “Cenoonommstmme oo snnio. s s c” with a key of 8, <span class="literal">numOfColumns</span> is set to <span class="literal">4</span>, <span class="literal">numOfRows</span> is set to <span class="literal">8</span>, and <span class="literal">numOfShadedBoxes</span> is set to <span class="literal">2</span>.</p>
<p class="indent">Just like the encryption program had a variable named <span class="literal">ciphertext</span> that was a list of strings to represent the grid of ciphertext, <span class="literal">decryptMessage()</span> also has a list-of-strings variable named <span class="literal">plaintext</span>:</p>
<p class="programs1">31.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Each string in plaintext represents a column in the grid:<br class="calibre9" />32.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plaintext = [''] * numOfColumns</p>
<p class="indent">These strings are blank at first, with one string for each column of the grid. Using list replication, you can multiply a list of one blank string by <span class="literal">numOfColumns</span> to make a list of several blank strings equal to the number of columns needed.</p>
<p class="indent">Keep in mind that this <span class="literal">plaintext</span> is different from the <span class="literal">plaintext</span> in the <span class="literal">main()</span> function. Because the <span class="literal">decryptMessage</span><span class="literal">()</span> function and the <span class="literal">main()</span> function each has its own local scope, the functions’ <span class="literal">plaintext</span> variables are different and just happen to have the same name.</p>
<p class="indent">Remember that the grid for the <span class="literal">'Cenoonommstmme oo snnio. s s c'</span> example looks like <a href="#calibre_link-391" class="calibre8">Figure 8-1</a> on <a href="#calibre_link-391" class="calibre8">page 100</a>.</p>
<p class="indent">The <span class="literal">plaintext</span> variable will have a list of strings, and each string in the list will be a single column of this grid. For this decryption, you want <span class="literal">plaintext</span> to end up with the following value:</p>
<p class="programs1">['Common s', 'ense is ', 'not so c', 'ommon.']</p>
<p class="indent">That way, you can join all the list’s strings together to return the <span class="literal">'Common</span> <span class="literal">sense</span> <span class="literal">is</span> <span class="literal">not</span> <span class="literal">so</span> <span class="literal">common.'</span> string value.</p>
<p class="indent">To make the list, we first need to place each symbol in <span class="literal">message</span> in the correct string inside the <span class="literal">plaintext</span> list one at a time. We’ll create two variables named <span class="literal">column</span> and <span class="literal">row</span> to track the column and row where the next character in <span class="literal">message</span> should go; these variables should start at <span class="literal">0</span> to begin at the first column and first row. Lines 36 and 37 do this:</p>
<p class="programs1">34.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# The column and row variables point to where in the grid the next<br class="calibre9" />35.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# character in the encrypted message will go:<br class="calibre9" />36.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column = 0<br class="calibre9" />37.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row = 0</p>
<p class="indent">Line 39 starts a <span class="literal">for</span> loop that iterates over the characters in the <span class="literal">message</span> string. Inside this loop, the code will adjust the <span class="literal">column</span> and <span class="literal">row</span> variables so it concatenates <span class="literal">symbol</span> to the correct string in the <span class="literal">plaintext</span> list:</p>
<p class="programs1">39.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for symbol in message:<br class="calibre9" />40.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plaintext[column] += symbol<br class="calibre9" />41.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column += 1 # Point to the next column.</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-115"></span>Line 40 concatenates <span class="literal">symbol</span> to the string at index <span class="literal">column</span> in the <span class="literal">plaintext</span> list, because each string in <span class="literal">plaintext</span> represents a column. Then line 41 adds <span class="literal">1</span> to <span class="literal">column</span> (that is, it <em class="calibre7">increments</em> <span class="literal">column</span>) so that on the next iteration of the loop, <span class="literal">symbol</span> will be concatenated to the next string in the <span class="literal">plaintext</span> list.</p>
<p class="indent">We’ve handled incrementing <span class="literal">column</span> and <span class="literal">row</span>, but we’ll also need to reset the variables to <span class="literal">0</span> in some cases. To understand the code that does that, you’ll need to understand Boolean operators.</p>
<h4 class="h2" id="calibre_link-557"><strong class="calibre3"><em class="calibre12">Boolean Operators</em></strong></h4>
<p class="noindent"><em class="calibre7">Boolean operators</em> compare Boolean values (or expressions that evaluate to a Boolean value) and evaluate to a Boolean value. The Boolean operators <span class="literal">and</span> and <span class="literal">or</span> can help you form more complicated conditions for <span class="literal">if</span> and <span class="literal">while</span> statements. The <span class="literal">and</span> operator connects two expressions and evaluates to <span class="literal">True</span> if both expressions evaluate to <span class="literal">True</span>. The <span class="literal">or</span> operator connects two expressions and evaluates to <span class="literal">True</span> if one or both expressions evaluate to <span class="literal">True</span>; otherwise, these expressions evaluate to <span class="literal">False</span>. Enter the following into the interactive shell to see how the <span class="literal">and</span> operator works:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">10 &gt; 5 and 2 &lt; 4</span><br class="calibre9" />True<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">10 &gt; 5 and 4 != 4</span><br class="calibre9" />False</p>
<p class="indent">The first expression evaluates to <span class="literal">True</span> because the expressions on either side of the <span class="literal">and</span> operator both evaluate to <span class="literal">True</span>. In other words, the expression <span class="literal">10 &gt; 5 and 2 &lt; 4</span> evaluates to <span class="literal">True and True</span>, which in turn evaluates to <span class="literal">True</span>.</p>
<p class="indent">However, in the second expression, although <span class="literal">10 &gt; 5</span> evaluates to <span class="literal">True</span>, the expression <span class="literal">4 != 4</span> evaluates to <span class="literal">False</span>. This means the expression evaluates to <span class="literal">True and False</span>. Because both expressions have to be <span class="literal">True</span> for the <span class="literal">and</span> operator to evaluate to <span class="literal">True</span>, the whole expression evaluates to <span class="literal">False</span>.</p>
<p class="indent">If you ever forget how a Boolean operator works, you can look at its <em class="calibre7">truth table</em>, which shows what different combinations of Boolean values evaluate to based on the operator used. <a href="#calibre_link-392" class="calibre8">Table 8-1</a> is a truth table for the <span class="literal">and</span> operator.</p>
<p class="tabcap"><a id="calibre_link-392" class="calibre8"></a><strong class="calibre5">Table 8-1:</strong> The <span class="literalcaption">and</span> Operator Truth Table</p>
<table class="topbot">
<thead class="calibre16">
<tr class="table_w">
<td class="table_th"><p class="table"><strong class="calibre5">A and B</strong></p></td>
<td class="table_th"><p class="table"><strong class="calibre5">Evaluates to</strong></p></td>
</tr>
</thead>
<tbody class="calibre17">
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">True and True</span></p></td>
<td class="calibre18"><p class="table"><span class="literal">True</span></p></td>
</tr>
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">True and False</span></p></td>
<td class="calibre18"><p class="table"><span class="literal">False</span></p></td>
</tr>
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">False and True</span></p></td>
<td class="calibre18"><p class="table"><span class="literal">False</span></p></td>
</tr>
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">False and False</span></p></td>
<td class="calibre18"><p class="table"><span class="literal">False</span></p></td>
</tr></tbody></table>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-297"></span>To see how the <span class="literal">or</span> operator works, enter the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">10 &gt; 5 or 4 != 4</span><br class="calibre9" />True<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">10 &lt; 5 or 4 != 4</span><br class="calibre9" />False</p>
<p class="indent">When you’re using the <span class="literal">or</span> operator, only one side of the expression must be <span class="literal">True</span> for the <span class="literal">or</span> operator to evaluate the whole expression as <span class="literal">True</span>, which is why <span class="literal">10 &gt; 5 or 4 != 4</span> evaluates to <span class="literal">True</span>. However, because both the expression <span class="literal">10 &lt; 5</span> and the expression <span class="literal">4 != 4</span> are <span class="literal">False</span>, the second expression evaluates to <span class="literal">False or False</span>, which in turn evaluates to <span class="literal">False</span>.</p>
<p class="indent">The <span class="literal">or</span> operator’s truth table is shown in <a href="#calibre_link-393" class="calibre8">Table 8-2</a>.</p>
<p class="tabcap"><a id="calibre_link-393" class="calibre8"></a><strong class="calibre5">Table 8-2:</strong> The <span class="literalcaption">or</span> Operator Truth Table</p>
<table class="topbot">
<thead class="calibre16">
<tr class="table_w">
<td class="table_th"><p class="table"><strong class="calibre5">A or B</strong></p></td>
<td class="table_th"><p class="table"><strong class="calibre5">Evaluates to</strong></p></td>
</tr>
</thead>
<tbody class="calibre17">
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">True or True</span></p></td>
<td class="calibre18"><p class="table"><span class="literal">True</span></p></td>
</tr>
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">True or False</span></p></td>
<td class="calibre18"><p class="table"><span class="literal">True</span></p></td>
</tr>
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">False or True</span></p></td>
<td class="calibre18"><p class="table"><span class="literal">True</span></p></td>
</tr>
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">False or False</span></p></td>
<td class="calibre18"><p class="table"><span class="literal">False</span></p></td>
</tr></tbody></table>
<p class="indent">The third Boolean operator is <span class="literal">not</span>. The <span class="literal">not</span> operator evaluates to the opposite Boolean value of the value it operates on. So <span class="literal">not True</span> is <span class="literal">False</span> and <span class="literal">not False</span> is <span class="literal">True</span>. Enter the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">not 10 &gt; 5</span><br class="calibre9" />False<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">not 10 &lt; 5</span><br class="calibre9" />True<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">not False</span><br class="calibre9" />True<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">not not False</span><br class="calibre9" />False<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">not not not not not False</span><br class="calibre9" />True</p>
<p class="indent">As you can see in the last two expressions, you can even use multiple <span class="literal">not</span> operators. The <span class="literal">not</span> operator’s truth table is shown in <a href="#calibre_link-394" class="calibre8">Table 8-3</a>.</p>
<p class="tabcap"><a id="calibre_link-394" class="calibre8"></a><strong class="calibre5">Table 8-3:</strong> The <span class="literalcaption">not</span> Operator Truth Table</p>
<table class="topbot">
<thead class="calibre16">
<tr class="table_w">
<td class="table_th"><p class="table"><strong class="calibre5">not A</strong></p></td>
<td class="table_th"><p class="table"><strong class="calibre5">Evaluates to</strong></p></td>
</tr></thead>
<tbody class="calibre17">
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">not True</span></p></td>
<td class="calibre18"><p class="table"><span class="literal">False</span></p></td>
</tr>
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">not False</span></p></td>
<td class="calibre18"><p class="table"><span class="literal">True</span></p></td>
</tr></tbody></table>
<h5 class="h3"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-116" class="calibre1"></span><strong class="calibre3">The and and or Operators Are Shortcuts</strong></h5>
<p class="noindent">Similar to how <span class="literal">for</span> loops let you do the same task as <span class="literal">while</span> loops but with less code, the <span class="literal">and</span> and <span class="literal">or</span> operators also let you shorten your code. Enter the following two pieces of code, which have the same result, into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">if 10 &gt; 5:</span><br class="calibre9" />...&nbsp;&nbsp;&nbsp;<span class="codestrong">if 2 &lt; 4:</span><br class="calibre9" />...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="codestrong">print('Hello!')</span><br class="calibre9" />...<br class="calibre9" />Hello!<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">if 10 &gt; 5 and 2 &lt; 4:</span><br class="calibre9" />...&nbsp;&nbsp;&nbsp;<span class="codestrong">print('Hello!')</span><br class="calibre9" />...<br class="calibre9" />Hello!</p>
<p class="indent">The <span class="literal">and</span> operator can take the place of two <span class="literal">if</span> statements that check each part of the expression separately (where the second <span class="literal">if</span> statement is inside the first <span class="literal">if</span> statement’s block).</p>
<p class="indent">You can also replace an if and <span class="literal">elif</span> statement with the <span class="literal">or</span> operator. To give this a try, enter the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">if 4 != 4:</span><br class="calibre9" />...&nbsp;&nbsp;&nbsp;<span class="codestrong">print('Hello!')</span><br class="calibre9" />... <span class="codestrong">elif 10 &gt; 5:</span><br class="calibre9" />...&nbsp;&nbsp;&nbsp;<span class="codestrong">print('Hello!')</span><br class="calibre9" />...<br class="calibre9" />Hello!<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">if 4 != 4 or 10 &gt; 5:</span><br class="calibre9" />...&nbsp;&nbsp;&nbsp;<span class="codestrong">print('Hello!')</span><br class="calibre9" />...<br class="calibre9" />Hello!</p>
<p class="indent">The <span class="literal">if</span> and <span class="literal">elif</span> statements will each check a different part of the expression, whereas the <span class="literal">or</span> operator can check both statements in one line.</p>
<h5 class="h3"><strong class="calibre3">Order of Operations for Boolean Operators</strong></h5>
<p class="noindentt">You know that math operators have an order of operations, and so do the <span class="literal">and</span>, <span class="literal">or</span>, and <span class="literal">not</span> operators. First, <span class="literal">not</span> is evaluated, then <span class="literal">and</span>, and then <span class="literal">or</span>. Enter the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">not False and False&nbsp;&nbsp;&nbsp;&nbsp;# not False evaluates first</span><br class="calibre9" />False<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">not (False and False)&nbsp;&nbsp;# (False and False) evaluates first</span><br class="calibre9" />True</p>
<p class="indent">In the first line of code, <span class="literal">not False</span> is evaluated first, so the expression becomes <span class="literal">True and False</span>, which evaluates to <span class="literal">False</span>. In the second line, parentheses are evaluated first, even before the <span class="literal">not</span> operator, so <span class="literal">False and False</span> is evaluated as <span class="literal">False</span>, and the expression becomes <span class="literal">not (False)</span>, which is <span class="literal">True</span>.</p>
<h4 class="h2" id="calibre_link-558"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-920" class="calibre1"></span><strong class="calibre3"><em class="calibre12">Adjusting the column and row Variables</em></strong></h4>
<p class="noindent">Now that you know how Boolean operators work, you can learn how the <span class="literal">column</span> and <span class="literal">row</span> variables are reset in <em class="calibre7">transpositionDecrypt.py</em>.</p>
<p class="indent">There are two cases in which you’ll want to reset <span class="literal">column</span> to <span class="literal">0</span> so that on the next iteration of the loop, <span class="literal">symbol</span> is added to the first string in the list in <span class="literal">plaintext</span>. In the first case, you want to do this if <span class="literal">column</span> is incremented past the last index in <span class="literal">plaintext</span>. In this situation, the value in <span class="literal">column</span> will be equal to <span class="literal">numOfColumns</span>. (Remember that the last index in <span class="literal">plaintext</span> will be <span class="literal">numOfColumns</span> minus one. So when <span class="literal">column</span> is equal to <span class="literal">numOfColumns</span>, it’s already past the last index.)</p>
<p class="indent">The second case is if <span class="literal">column</span> is at the last index and the <span class="literal">row</span> variable is pointing to a row that has a shaded box in the last column. As a visual example of that, the decryption grid with the column indexes along the top and the row indexes down the side is shown in <a href="#calibre_link-395" class="calibre8">Figure 8-2</a>.</p>
<div class="image"><img src="images/00000.jpeg" alt="Images" class="calibre4" /></div>
<p class="figcap"><a id="calibre_link-395" class="calibre8"></a><em class="calibre7">Figure 8-2: Decryption grid with column and row indexes</em></p>
<p class="indent">You can see that the shaded boxes are in the last column (whose index will be <span class="literal">numOfColumns</span> <span class="literal">- 1</span>) in rows 6 and 7. To calculate which row indexes potentially have shaded boxes, use the expression <span class="literal">row &gt;=</span> <span class="literal">numOfRows</span> <span class="literal">-</span> <span class="literal">numOfShadedBoxes</span>. In our example with eight rows (with indexes 0 to 7), rows 6 and 7 are shaded. The number of unshaded boxes is the total number of rows (in our example, 8) minus the number of shaded boxes (in our example, 2). If the current <span class="literal">row</span> is equal to or greater than this number (8 &ndash; 2 = 6), we can know we have a shaded box. If this expression is <span class="literal">True</span> and <span class="literal">column</span> is also equal to <span class="literal">numOfColumns</span> <span class="literal">- 1</span>, then Python has encountered a shaded box; at this point, you want to reset <span class="literal">column</span> to <span class="literal">0</span> for the next iteration:</p>
<p class="programs1">43.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# If there are no more columns OR we're at a shaded box, go back<br class="calibre9" />44.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# to the first column and the next row:<br class="calibre9" />45.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (column == numOfColumns) or (column == numOfColumns - 1 and<br class="calibre9" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row &gt;= numOfRows - numOfShadedBoxes):<br class="calibre9" />46.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column = 0<br class="calibre9" />47.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row += 1</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-284"></span>These two cases are why the condition on line 45 is <span class="literal">(column ==</span> <span class="literal">numOfColumns</span><span class="literal">) or (column == numOfColumns - 1 and row &gt;= numOfRows -</span> <span class="literal">numOfShadedBoxes</span><span class="literal">)</span>. Although that looks like a big, complicated expression, remember that you can break it down into smaller parts. The expression <span class="literal">(</span><span class="literal">column</span> <span class="literal">== numOfColumns)</span> checks whether the column variable is past the index range, and the second part of the expression checks whether we’re at a <span class="literal">column</span> and <span class="literal">row</span> index that is a shaded box. If either of these two expressions is true, the block of code that executes will reset <span class="literal">column</span> to the first column by setting it to <span class="literal">0</span>. You’ll also increment the <span class="literal">row</span> variable.</p>
<p class="indent">By the time the <span class="literal">for</span> loop on line 39 has finished looping over every character in <span class="literal">message</span>, the <span class="literal">plaintext</span> list’s strings have been modified so they’re now in the decrypted order (if the correct key was used). The strings in the <span class="literal">plaintext</span> list are joined together (with a blank string between each string) by the <span class="literal">join()</span> string method on line 49:</p>
<p class="programs1">49.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ''.join(plaintext)</p>
<p class="indent">Line 49 also returns the string that the <span class="literal">decryptMessage()</span> function returns.</p>
<p class="indent">For decryption, <span class="literal">plaintext</span> will be <span class="literal">['Common s', 'ense is ', 'not so c',</span> <span class="literal">'ommon.']</span>, so <span class="literal">''.join(plaintext)</span> will evaluate to <span class="literal">'Common sense is not so common.'</span></p>
<h3 class="h1" id="calibre_link-559"><strong class="calibre3">Calling the main() Function</strong></h3>
<p class="noindent">The first line that our program runs after importing modules and executing the <span class="literal">def</span> statements is the <span class="literal">if</span> statement on line 54.</p>
<p class="programs1">52. # If transpositionDecrypt.py is run (instead of imported as a module),<br class="calibre9" />53. # call the main() function:<br class="calibre9" />54. if __name__ == '__main__':<br class="calibre9" />55.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;main()</p>
<p class="indent">As with the transposition encryption program, Python checks whether this program has been run (instead of imported by a different program) by checking whether the <span class="literal">__name__</span> variable is set to the string value <span class="literal">'__main__'</span>. If so, the code executes the <span class="literal">main()</span> function.</p>
<h3 class="h1" id="calibre_link-560"><strong class="calibre3">Summary</strong></h3>
<p class="noindent">That’s it for the decryption program. Most of the program is in the <span class="literal">decryptMessage()</span> function. The programs we’ve written can encrypt and decrypt the message “Common sense is not so common.” with the key 8; however, you should try several other messages and keys to check that a message that is encrypted and then decrypted results in the same original message. If you don’t get the results you expect, you’ll know that either the encryption code or the decryption code doesn’t work. In <a href="#calibre_link-25" class="calibre8">Chapter 9</a>, we’ll automate this process by writing a program to test our programs.</p>
<p class="indent">If you’d like to see a step-by-step trace of the transposition cipher decryption program’s execution, visit <a href="https://www.nostarch.com/crackingcodes/" class="calibre8"><em class="calibre7">https://www.nostarch.com/crackingcodes/</em></a>.</p>
<div class="sidebar">
<p class="sidebart" id="calibre_link-561"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-921"></span><strong class="calibre5">PRACTICE QUESTIONS</strong></p>
<p class="noindent">Answers to the practice questions can be found on the book’s website at <em class="calibre7"><a href="https://www.nostarch.com/crackingcodes/" class="calibre8">https://www.nostarch.com/crackingcodes/</a></em>.</p>
<ol class="calibre13">
<li value="1" class="calibre11"><p class="noindent">Using paper and pencil, decrypt the following messages with the key 9. The <span class="ent">▪</span> marks a single space. The total number of characters has been counted for you.</p>
<ul class="calibre20">
<li class="calibre11"><p class="noindent">H<span class="ent">▪</span>cb<span class="ent">▪</span><span class="ent">▪</span>irhdeuousBdi<span class="ent">▪</span><span class="ent">▪</span><span class="ent">▪</span>prrtyevdgp<span class="ent">▪</span>nir<span class="ent">▪</span><span class="ent">▪</span>eerit<span class="ent">▪</span>eatoreechadihf<span class="ent">▪</span>pak<br class="calibre9" />en<span class="ent">▪</span>ge<span class="ent">▪</span>b<span class="ent">▪</span>te<span class="ent">▪</span>dih<span class="ent">▪</span>aoa.da<span class="ent">▪</span>tts<span class="ent">▪</span>tn (89 characters)</p></li>
<li class="calibre11"><p class="noindent">A<span class="ent">▪</span>b<span class="ent">▪</span><span class="ent">▪</span>drottthawa<span class="ent">▪</span>nwar<span class="ent">▪</span>eci<span class="ent">▪</span>t<span class="ent">▪</span>nlel<span class="ent">▪</span>ktShw<span class="ent">▪</span>leec,hheat<span class="ent">▪</span>.na<span class="ent">▪</span><span class="ent">▪</span>e<span class="ent">▪</span>soog<br class="calibre9" />mah<span class="ent">▪</span>a<span class="ent">▪</span><span class="ent">▪</span>ateniAcgakh<span class="ent">▪</span>dmnor<span class="ent">▪</span><span class="ent">▪</span> (86 characters)</p></li>
<li class="calibre11"><p class="noindent">Bmmsrl<span class="ent">▪</span>dpnaua!toeboo’ktn<span class="ent">▪</span>uknrwos.<span class="ent">▪</span>yaregonr<span class="ent">▪</span>w<span class="ent">▪</span>nd,tu<span class="ent">▪</span><span class="ent">▪</span>oiady<span class="ent">▪</span>h<br class="calibre9" />gtRwt<span class="ent">▪</span><span class="ent">▪</span><span class="ent">▪</span>A<span class="ent">▪</span>hhanhhasthtev<span class="ent">▪</span><span class="ent">▪</span>e<span class="ent">▪</span>t<span class="ent">▪</span>e<span class="ent">▪</span><span class="ent">▪</span>eo (93 characters)</p></li>
</ul>
</li>
<li value="2" class="calibre11"><p class="noindent">When you enter the following code into the interactive shell, what does each line print?</p>
<p class="programs1">&gt;&gt;&gt; math.ceil(3.0)<br class="calibre9" />&gt;&gt;&gt; math.floor(3.1)<br class="calibre9" />&gt;&gt;&gt; round(3.1)<br class="calibre9" />&gt;&gt;&gt; round(3.5)<br class="calibre9" />&gt;&gt;&gt; False and False<br class="calibre9" />&gt;&gt;&gt; False or False<br class="calibre9" />&gt;&gt;&gt; not not True</p>
</li>
<li value="3" class="calibre11"><p class="noindent">Draw the complete truth tables for the and, or, and not operators.</p></li>
<li value="4" class="calibre11"><p class="noindent">Which of the following is correct?</p>
<p class="programs1">if __name__ == '__main__':<br class="calibre9" />if __main__ == '__name__':<br class="calibre9" />if _name_ == '_main_':<br class="calibre9" />if _main_ == '_name_':</p>
</li>
</ol>
<span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-922"></span>
</div>
</div>
