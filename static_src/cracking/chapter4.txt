


<div><a target="_blank" href="https://www.amazon.com/gp/product/1593278225/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1593278225&linkCode=as2&tag=playwithpyth-20&linkId=bf3b22819f0886d277e88b8a653b81ad">
<img src="images/cover_crackingcodes_thumb.png" /><br />Buy the print or ebook online.</a></div>
<div><a href="chapter3.html">Previous Chapter - String and Writing Programs</a> | <a href="chapter5.html">Next Chapter - The Caesar Cipher</a></div>
<div id="calibre_link-356" class="calibre">
<h2 class="h2a1" id="calibre_link-57"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-192" class="calibre1"></span><span class="big">4</span><br class="calibre15" />THE REVERSE CIPHER</h2>
<p class="epigraph"><em class="calibre7">“Every man is surrounded by a neighborhood of voluntary spies.”<br class="calibre9" />&mdash;Jane Austen,</em> Northanger Abbey</p>
<div class="image"><img src="images/00078.jpeg" alt="Images" class="calibre4" /></div>
<p class="noindent">The reverse cipher encrypts a message by printing it in reverse order. So “Hello, world!” encrypts to “!dlrow ,olleH”. To decrypt, or get the original message, you simply reverse the encrypted message. The encryption and decryption steps are the same.</p>
<p class="indent">However, this reverse cipher is weak, making it easy to figure out the plaintext. Just by looking at the ciphertext, you can figure out the message is in reverse order.</p>
<p class="block-quote"><em class="calibre7">.syas ti tahw tuo erugif llits ylbaborp nac uoy ,detpyrcne si siht hguoht neve ,elpmaxe roF</em></p>
<p class="indent">But the code for the reverse cipher program is easy to explain, so we’ll use it as our first encryption program.</p>
<div class="sidebar">
<p class="sidebart"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-309"></span><strong class="calibre5">TOPICS COVERED IN THIS CHAPTER</strong></p>
<ul class="calibre10">
<li class="calibre11"><p class="noindent">The <span class="literal">len()</span> function</p></li>
<li class="calibre11"><p class="noindent"><span class="literal">while</span> loops</p></li>
<li class="calibre11"><p class="noindent">Boolean data type</p></li>
<li class="calibre11"><p class="noindent">Comparison operators</p></li>
<li class="calibre11"><p class="noindent">Conditions</p></li>
<li class="calibre11"><p class="noindent">Blocks</p></li>
</ul>
</div>
<h3 class="h1" id="calibre_link-486"><strong class="calibre3">Source Code for the Reverse Cipher Program</strong></h3>
<p class="noindent">In IDLE, click <strong class="calibre5">File</strong><span class="ent">▸</span><strong class="calibre5">New Window</strong> to create a new file editor window. Enter the following code, save it as <em class="calibre7">reverseCipher.py</em>, and press F5 to run it, but remember not to type the numbers before each line:</p>
<p class="noindentz"><em class="calibre7">reverseCipher.py</em></p>
<p class="programs1">&nbsp;1. # Reverse Cipher<br class="calibre9" />&nbsp;2. # https://www.nostarch.com/crackingcodes/ (BSD Licensed)<br class="calibre9" />&nbsp;3.<br class="calibre9" />&nbsp;4. message = 'Three can keep a secret, if two of them are dead.'<br class="calibre9" />&nbsp;5. translated = ''<br class="calibre9" />&nbsp;6.<br class="calibre9" />&nbsp;7. i = len(message) - 1<br class="calibre9" />&nbsp;8. while i &gt;= 0:<br class="calibre9" />&nbsp;9.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translated = translated + message[i]<br class="calibre9" />10.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = i - 1<br class="calibre9" />11.<br class="calibre9" />12. print(translated)</p>
<h3 class="h1" id="calibre_link-487"><strong class="calibre3">Sample Run of the Reverse Cipher Program</strong></h3>
<p class="noindent">When you run the <em class="calibre7">reverseCipher.py</em> program, the output looks like this:</p>
<p class="programs1">.daed era meht fo owt fi ,terces a peek nac eerhT</p>
<p class="indent">To decrypt this message, copy the <span class="literal">.daed era meht fo owt fi ,terces a peek nac eerhT</span> text to the clipboard by highlighting the message and pressing <small class="calibre14">ctrl</small>-C on Windows and Linux or <img class="inline" src="images/00059.jpeg" alt="Images" />-C on macOS. Then paste it (using <small class="calibre14">ctrl</small>-V on Windows and Linux or <img class="inline" src="images/00059.jpeg" alt="Images" />-V on macOS) as the string value stored in <span class="literal">message</span> on line 4. Be sure to retain the single quotes at the beginning and end of the string. The new line 4 looks like this (with the change in bold):</p>
<p class="programs1">&nbsp;<span class="literal1"></span>4. message = <span class="codestrong">'.daed era meht fo owt fi ,terces a peek nac eerhT'</span></p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-264"></span>Now when you run the <em class="calibre7">reverseCipher.py</em> program, the output decrypts to the original message:</p>
<p class="programs1">Three can keep a secret, if two of them are dead.</p>
<h3 class="h1" id="calibre_link-488"><strong class="calibre3">Setting Up Comments and Variables</strong></h3>
<p class="noindent">The first two lines in <em class="calibre7">reverseCipher.py</em> are comments explaining what the program is and the website where you can find it.</p>
<p class="programs1">&nbsp;1. # Reverse Cipher<br class="calibre9" />&nbsp;2. # https://www.nostarch.com/crackingcodes/ (BSD Licensed)</p>
<p class="indent">The <span class="literal">BSD Licensed</span> part means this program is free to copy and modify by anyone as long as the program retains the credits to the original author (in this case, the book’s website at <span class="literal">https://www.nostarch.com/crackingcodes/</span> in the second line). I like to have this info in the file so if it gets copied around the internet, a person who downloads it always knows where to look for the original source. They’ll also know this program is open source software and free to distribute to others.</p>
<p class="indent">Line 3 is just a blank line, and Python skips it. Line 4 stores the string we want to encrypt in a variable named <span class="literal">message</span>:</p>
<p class="programs1">&nbsp;4. message = 'Three can keep a secret, if two of them are dead.'</p>
<p class="indent">Whenever we want to encrypt or decrypt a new string, we just type the string directly into the code on line 4.</p>
<p class="indent">The <span class="literal">translated</span> variable on line 5 is where our program will store the reversed string:</p>
<p class="programs1">&nbsp;5. translated = ''</p>
<p class="indent">At the start of the program, the <span class="literal">translated</span> variable contains this blank string. (Remember that the blank string is two single quote characters, not one double quote character.)</p>
<h3 class="h1" id="calibre_link-489"><strong class="calibre3">Finding the Length of a String</strong></h3>
<p class="noindent">Line 7 is an assignment statement storing a value in a variable named <span class="literal">i</span>:</p>
<p class="programs1">&nbsp;7. i = len(message) - 1</p>
<p class="indent">The expression evaluated and stored in the variable is <span class="literal">len(message) - 1</span>. The first part of this expression, <span class="literal">len(message)</span>, is a function call to the <span class="literal">len()</span> function, which accepts a string argument, just like <span class="literal">print()</span>, and returns an <span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-175"></span>integer value of how many characters are in the string (that is, the <em class="calibre7">length</em> of the string). In this case, we pass the <span class="literal">message</span> variable to <span class="literal">len()</span>, so <span class="literal">len(message)</span> returns how many characters are in the string value stored in <span class="literal">message</span>.</p>
<p class="indent">Let’s experiment with the <span class="literal">len()</span> function in the interactive shell. Enter the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">len('Hello')</span><br class="calibre9" />5<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">len('')</span><br class="calibre9" />0<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">spam = 'Al'</span><br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">len(spam)</span><br class="calibre9" />2<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">len('Hello,' + ' ' + 'world!')</span><br class="calibre9" />13</p>
<p class="indent">From the return value of <span class="literal">len()</span>, we know the string <span class="literal">'Hello'</span> has five characters in it and the blank string has zero characters in it. If we store the string <span class="literal">'Al'</span> in a variable and then pass the variable to <span class="literal">len()</span>, the function returns <span class="literal">2</span>. If we pass the expression <span class="literal">'Hello,' + ' ' + 'world!'</span> to the <span class="literal">len()</span> function, it returns <span class="literal">13</span>. The reason is that <span class="literal">'Hello,' + ' ' + 'world!'</span> evaluates to the string value <span class="literal">'Hello, world!'</span>, which has 13 characters in it. (The space and the exclamation point count as characters.)</p>
<p class="indent">Now that you understand how the <span class="literal">len()</span> function works, let’s return to line 7 of the <em class="calibre7">reverseCipher.py</em> program. Line 7 finds the index of the last character in <span class="literal">message</span> by subtracting 1 from <span class="literal">len(message)</span>. It has to subtract 1 because the indexes of, for example, a 5-character length string like <span class="literal">'Hello'</span> are from 0 to 4. This integer is then stored in the <span class="literal">i</span> variable.</p>
<h3 class="h1" id="calibre_link-490"><strong class="calibre3">Introducing the while Loop</strong></h3>
<p class="noindent">Line 8 is a type of Python instruction called a <span class="literal">while</span> loop or <span class="literal">while</span> statement:</p>
<p class="programs1">&nbsp;8. while i &gt;= 0:</p>
<p class="indent">A <span class="literal">while</span> loop is made up of four parts (as shown in <a href="#calibre_link-357" class="calibre8">Figure 4-1</a>).</p>
<div class="image"><img src="images/00061.jpeg" alt="Images" class="calibre4" /></div>
<p class="figcap"><a id="calibre_link-357" class="calibre8"></a><em class="calibre7">Figure 4-1: The parts of a <span class="literalcaption">while</span> loop</em></p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-84"></span>A <em class="calibre7">condition</em> is an expression used in a <span class="literal">while</span> statement. The block of code in the <span class="literal">while</span> statement will execute as long as the condition is true.</p>
<p class="indent">To understand <span class="literal">while</span> loops, you first need to learn about Booleans, comparison operators, and blocks.</p>
<h4 class="h2" id="calibre_link-491"><strong class="calibre3"><em class="calibre12">The Boolean Data Type</em></strong></h4>
<p class="noindent">The <em class="calibre7">Boolean</em> data type has only two values: <span class="literal">True</span> or <span class="literal">False</span>. These Boolean values, or <em class="calibre7">bools</em>, are case sensitive (you always need to capitalize the <em class="calibre7">T</em> and <em class="calibre7">F</em>, while leaving the rest in lowercase). They are not string values, so you don’t put quotes around <span class="literal">True</span> or <span class="literal">False</span>.</p>
<p class="indent">Try out some bools by entering the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">spam = True</span><br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">spam</span><br class="calibre9" />True<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">spam = False</span><br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">spam</span><br class="calibre9" />False</p>
<p class="indent">Like a value of any other data type, bools can be stored in variables.</p>
<h4 class="h2" id="calibre_link-492"><strong class="calibre3"><em class="calibre12">Comparison Operators</em></strong></h4>
<p class="noindent">In line 8 of the <em class="calibre7">reverseCipher.py</em> program, look at the expression after the <span class="literal">while</span> keyword:</p>
<p class="programs1">&nbsp;8. while i &gt;= 0:</p>
<p class="indent">The expression that follows the <span class="literal">while</span> keyword (the <span class="literal">i &gt;= 0</span> part) contains two values (the value in the variable <span class="literal">i</span> and the integer value <span class="literal">0</span>) connected by the <span class="literal">&gt;=</span> sign, called the “greater than or equal” operator. The <span class="literal">&gt;=</span> operator is a <em class="calibre7">comparison</em> <em class="calibre7">operator</em>.</p>
<p class="indent">We use comparison operators to compare two values and evaluate to a <span class="literal">True</span> or <span class="literal">False</span> Boolean value. <a href="#calibre_link-358" class="calibre8">Table 4-1</a> lists the comparison operators.</p>
<p class="tabcap"><a id="calibre_link-358" class="calibre8"></a><strong class="calibre5">Table 4-1:</strong> Comparison Operators</p>
<table class="topbot">
<thead class="calibre16">
<tr class="table_w">
<td class="table_th"><p class="table"><strong class="calibre5">Operator sign</strong></p></td>
<td class="table_th"><p class="table"><strong class="calibre5">Operator name</strong></p></td>
</tr>
</thead>
<tbody class="calibre17">
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">&lt;</span></p></td>
<td class="calibre18"><p class="table">Less than</p></td>
</tr>
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">&gt;</span></p></td>
<td class="calibre18"><p class="table">Greater than</p></td>
</tr>
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">&lt;=</span></p></td>
<td class="calibre18"><p class="table">Less than or equal to</p></td>
</tr>
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">&gt;=</span></p></td>
<td class="calibre18"><p class="table">Greater than or equal to</p></td>
</tr>
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">==</span></p></td>
<td class="calibre18"><p class="table">Equal to</p></td>
</tr>
<tr class="table_w">
<td class="calibre18"><p class="table"><span class="literal">!=</span></p></td>
<td class="calibre18"><p class="table">Not equal to</p></td>
</tr></tbody></table>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-87"></span>Enter the following expressions in the interactive shell to see the Boolean value they evaluate to:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">0 &lt; 6</span><br class="calibre9" />True<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">6 &lt; 0</span><br class="calibre9" />False<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">50 &lt; 10.5</span><br class="calibre9" />False<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">10.5 &lt; 11.3</span><br class="calibre9" />True<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">10 &lt; 10</span><br class="calibre9" />False</p>
<p class="indent">The expression <span class="literal">0 &lt; 6</span> returns the Boolean value <span class="literal">True</span> because the number <span class="literal">0</span> is less than the number <span class="literal">6</span>. But because <span class="literal">6</span> is not less than <span class="literal">0</span>, the expression <span class="literal">6 &lt; 0</span> evaluates to <span class="literal">False</span>. The expression <span class="literal">50 &lt; 10.5</span> is <span class="literal">False</span> because <span class="literal">50</span> isn’t less than <span class="literal">10.5</span>. The expression <span class="literal">10 &lt; 11.3</span> evaluates to <span class="literal">True</span> because <span class="literal">10.5</span> is less than <span class="literal">11.3</span>.</p>
<p class="indent">Look again at <span class="literal">10 &lt; 10</span>. It’s <span class="literal">False</span> because the number <span class="literal">10</span> isn’t less than the number <span class="literal">10</span>. They are exactly the same. (If Alice were the same height as Bob, you wouldn’t say that Alice was shorter than Bob. That statement would be false.)</p>
<p class="indent">Enter some expressions using the <span class="literal">&lt;=</span> (less than or equal to) and <span class="literal">&gt;=</span> (greater than or equal to) operators:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">10 &lt;= 20</span><br class="calibre9" />True<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">10 &lt;= 10</span><br class="calibre9" />True<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">10 &gt;= 20</span><br class="calibre9" />False<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">20 &gt;= 20</span><br class="calibre9" />True</p>
<p class="indent">Notice that <span class="literal">10 &lt;= 10</span> is <span class="literal">True</span> because the operator checks if 10 is less than <em class="calibre7">or equal to</em> 10. Remember that for the “less than or equal to” and “greater than or equal to” operators, the <span class="literal">&lt;</span> or <span class="literal">&gt;</span> sign always comes before the <span class="literal">=</span> sign.</p>
<p class="indent">Now enter some expressions that use the <span class="literal">==</span> (equal to) and <span class="literal">!=</span> (not equal to) operators into the shell to see how they work:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">10 == 10</span><br class="calibre9" />True<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">10 == 11</span><br class="calibre9" />False<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">11 == 10</span><br class="calibre9" />False<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">10 != 10</span><br class="calibre9" />False<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">10 != 11</span><br class="calibre9" />True</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-85"></span>These operators work as you would expect for integers. Comparing integers that are equal to each other with the <span class="literal">==</span> operator evaluates as <span class="literal">True</span> and unequal values as <span class="literal">False</span>. When you compare with the <span class="literal">!=</span> operator, it’s the opposite.</p>
<p class="indent">String comparisons work similarly:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">'Hello' == 'Hello'</span><br class="calibre9" />True<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'Hello' == 'Goodbye'</span><br class="calibre9" />False<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'Hello' == 'HELLO'</span><br class="calibre9" />False<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'Goodbye' != 'Hello'</span><br class="calibre9" />True</p>
<p class="indent">Capitalization matters to Python, so string values that don’t match capitalization exactly are not the same string. For example, the strings <span class="codestrong">'</span><span class="literal">Hello</span><span class="codestrong">'</span> and <span class="codestrong">'</span><span class="literal">HELLO</span><span class="codestrong">'</span> are not equal to each other, so comparing them with <span class="literal">==</span> evaluates to <span class="literal">False</span>.</p>
<p class="indent">Notice the difference between the assignment operator (<span class="literal">=</span>) and the “equal to” comparison operator (<span class="literal">==</span>). The single equal sign (<span class="literal">=</span>) is used to assign a value to a variable, and the double equal sign (<span class="literal">==</span>) is used in expressions to check whether two values are the same. If you’re asking Python whether two things are equal, use <span class="literal">==</span>. If you’re telling Python to set a variable to a value, use <span class="literal">=</span>.</p>
<p class="indent">In Python, string and integer values are always considered different values and will never be equal to each other. For example, enter the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">42 == 'Hello'</span><br class="calibre9" />False<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">42 == '42'</span><br class="calibre9" />False<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">10 == 10.0</span><br class="calibre9" />True</p>
<p class="indent">Even though they look alike, the integer <span class="literal">42</span> and the string <span class="literal">'42'</span> aren’t considered equal because a string isn’t the same as a number. Integers and floating-point numbers can be equal to each other because they’re both numbers.</p>
<p class="indent">When you’re working with comparison operators, just remember that every expression always evaluates to a <span class="literal">True</span> or <span class="literal">False</span> value.</p>
<h4 class="h2" id="calibre_link-493"><strong class="calibre3"><em class="calibre12">Blocks</em></strong></h4>
<p class="noindent">A <em class="calibre7">block</em> is one or more lines of code grouped together with the same minimum amount of <em class="calibre7">indentation</em> (that is, the number of spaces in front of the line).</p>
<p class="indent">A block begins when a line is indented by four spaces. Any following line that is also indented by at least four spaces is part of the block. When <span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-137"></span>a line is indented with another four spaces (for a total of eight spaces in front of the line), a new block begins inside the first block. A block ends when there is a line of code with the same indentation as before the block started.</p>
<p class="indent">Let’s look at some imaginary code (it doesn’t matter what the code is, because we’re only going to focus on the indentation of each line). The indented spaces are replaced with gray dots here to make them easier to count.</p>
<div class="image1"><img src="images/00062.jpeg" alt="Images" class="calibre4" /></div>
<p class="indent">You can see that line 1 has no indentation; that is, there are zero spaces in front of the line of code. But line 2 has four spaces of indentation. Because this is a larger amount of indentation than the previous line, we know a new block has begun. Line 3 also has four spaces of indentation, so we know the block continues on line 3.</p>
<p class="indent">Line 4 has even more indentation (eight spaces), so a new block has begun. This block is inside the other block. In Python, you can have blocks within blocks.</p>
<p class="indent">On line 5, the amount of indentation has decreased to four, so we know that the block on the previous line has ended. Line 4 is the only line in that block. Because line 5 has the same amount of indentation as the block in lines 2 and 3, it’s still part of the original outer block, even though it’s not part of the block on line 4.</p>
<p class="indent">Line 6 is a blank line, so we just skip it; it doesn’t affect the blocks.</p>
<p class="indent">Line 7 has four spaces of indentation, so we know that the block that started on line 2 has continued to line 7.</p>
<p class="indent">Line 8 has zero spaces of indentation, which is less indentation than the previous line. This decrease in indentation tells us that the previous block, the block that started on line 2, has ended.</p>
<p class="indent">This code shows two blocks. The first block goes from line 2 to line 7. The second block just consists of line 4 (and is inside the other block).</p>
<div class="note">
<p class="notet"><strong class="calibre3"><span class="notes">NOTE</span></strong></p>
<p class="notep"><em class="calibre7">Blocks don’t always have to be delineated by four spaces. Blocks can use any number of spaces, but the convention is to use four per indentation.</em></p>
</div>
<h4 class="h2" id="calibre_link-494"><strong class="calibre3"><em class="calibre12">The while Loop Statement</em></strong></h4>
<p class="noindent">Let’s look at the full <span class="literal">while</span> statement starting on line 8 of <em class="calibre7">reverseCipher.py</em>:</p>
<p class="programs1">&nbsp;8. while i &gt;= 0:<br class="calibre9" />&nbsp;9.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translated = translated + message[i]<br class="calibre9" /><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-903"></span>10.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = i - 1<br class="calibre9" />11.<br class="calibre9" />12. print(translated)</p>
<p class="indent">A <span class="literal">while</span> statement tells Python to first check what the condition evaluates to, which on line 8 is <span class="literal">i &gt;= 0</span>. You can think of the <span class="literal">while</span> statement <span class="literal">while i &gt;= 0:</span> as meaning “While the variable <span class="literal">i</span> is greater than or equal to zero, keep executing the code in the following block.” If the condition evaluates to <span class="literal">True</span>, the program execution enters the block following the <span class="literal">while</span> statement. By looking at the indentation, you can see that this block is made up of lines 9 and 10. When it reaches the bottom of the block, the program execution jumps back to the <span class="literal">while</span> statement on line 8 and checks the condition again. If it’s still <span class="literal">True</span>, the execution jumps into the start of the block and runs the code in the block again.</p>
<p class="indent">If the <span class="literal">while</span> statement’s condition evaluates to <span class="literal">False</span>, the program execution skips the code inside the following block and jumps down to the first line after the block (which is line 12).</p>
<h4 class="h2" id="calibre_link-495"><strong class="calibre3"><em class="calibre12">“Growing” a String</em></strong></h4>
<p class="noindent">Keep in mind that on line 7, the <span class="literal">i</span> variable is first set to the length of the <span class="literal">message</span> minus 1, and the <span class="literal">while</span> loop on line 8 keeps executing the lines inside the following block until the condition <span class="literal">i &gt;= 0</span> is <span class="literal">False</span>:</p>
<p class="programs1">&nbsp;7. i = len(message) - 1<br class="calibre9" />&nbsp;8. while i &gt;= 0:<br class="calibre9" />&nbsp;9.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translated = translated + message[i]<br class="calibre9" />10.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = i &ndash; 1<br class="calibre9" />11.<br class="calibre9" />12. print(translated)</p>
<p class="indent">Line 9 is an assignment statement that stores a value in the <span class="literal">translated</span> variable. The value that is stored is the current value of <span class="literal">translated</span> concatenated with the character at the index <span class="literal">i</span> in <span class="literal">message</span>. As a result, the string value stored in <span class="literal">translated</span> “grows” one character at a time until it becomes the fully encrypted string.</p>
<p class="indent">Line 10 is also an assignment statement. It takes the current integer value in <span class="literal">i</span> and subtracts 1 from it (this is called <em class="calibre7">decrementing</em> the variable). Then it stores this value as the new value of <span class="literal">i</span>.</p>
<p class="indent">The next line is 12, but because this line has less indentation, Python knows that the <span class="literal">while</span> statement’s block has ended. So rather than moving on to line 12, the program execution jumps back to line 8 where the <span class="literal">while</span> loop’s condition is checked again. If the condition is <span class="literal">True</span>, the lines inside the block (lines 9 and 10) are executed again. This keeps happening until the condition is <span class="literal">False</span> (that is, when <span class="literal">i</span> is less than <span class="literal">0</span>), in which case the program execution goes to the first line after the block (line 12).</p>
<p class="indent">Let’s think about the behavior of this loop to understand how many times it runs the code in the block. The variable <span class="literal">i</span> starts with the value of the last index of <span class="literal">message</span>, and the <span class="literal">translated</span> variable starts as a blank <span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-904"></span>string. Then inside the loop, the value of <span class="literal">message[i]</span> (which is the last character in the <span class="literal">message</span> string, because <span class="literal">i</span> will have the value of the last index) is added to the end of the <span class="literal">translated</span> string.</p>
<p class="indent">Then the value in <span class="literal">i</span> is decremented (that is, reduced) by <span class="literal">1</span>, meaning that <span class="literal">message[i]</span> will be the second to last character. So while <span class="literal">i</span> as an index keeps moving from the back of the string in <span class="literal">message</span> to the front, the string <span class="literal">message[i]</span> is added to the end of <span class="literal">translated</span>. This is how <span class="literal">translated</span> ends up holding the reverse of the string in the <span class="literal">message</span>. When <span class="literal">i</span> is finally set to <span class="literal">-1</span>, which happens when we reach index <span class="literal">0</span> of the message, the <span class="literal">while</span> loop’s condition is <span class="literal">False</span>, and the execution jumps to line 12:</p>
<p class="programs1">12. print(translated)</p>
<p class="indent">At the end of the program on line 12, we print the contents of the <span class="literal">translated</span> variable (that is, the string <span class="literal">'.daed era meht fo owt fi ,terces a peek nac eerhT'</span>) to the screen. This shows the user what the reversed string looks like.</p>
<p class="indent">If you’re still having trouble understanding how the code in the <span class="literal">while</span> loop reverses the string, try adding the new line (shown in bold) to the loop’s block:</p>
<p class="programs1">&nbsp;8. while i &gt;= 0:<br class="calibre9" />&nbsp;9.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translated = translated + message[i]<br class="calibre9" />10.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="codestrong">print('i is', i, ', message[i] is', message[i], ', translated is',<br class="calibre9" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translated)</span><br class="calibre9" />11.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = i - 1<br class="calibre9" />12.<br class="calibre9" />13. print(translated)</p>
<p class="indent">Line 10 prints the values of <span class="literal">i</span>, <span class="literal">message[i]</span>, and <span class="literal">translated</span> along with string labels each time the execution goes through the loop (that is, on each <em class="calibre7">iteration</em> of the loop). This time, we aren’t using string concatenation but something new. The commas tell the <span class="literal">print()</span> function that we’re printing six separate things, so the function adds a space between them. Now when you run the program, you can see how the <span class="literal">translated</span> variable “grows.” The output looks like this:</p>
<p class="programs1">i is 48 , message[i] is . , translated is .<br class="calibre9" />i is 47 , message[i] is d , translated is .d<br class="calibre9" />i is 46 , message[i] is a , translated is .da<br class="calibre9" />i is 45 , message[i] is e , translated is .dae<br class="calibre9" />i is 44 , message[i] is d , translated is .daed<br class="calibre9" />i is 43 , message[i] is&nbsp;&nbsp;&nbsp;, translated is .daed<br class="calibre9" />i is 42 , message[i] is e , translated is .daed e<br class="calibre9" />i is 41 , message[i] is r , translated is .daed er<br class="calibre9" />i is 40 , message[i] is a , translated is .daed era<br class="calibre9" />i is 39 , message[i] is&nbsp;&nbsp;&nbsp;, translated is .daed era<br class="calibre9" />i is 38 , message[i] is m , translated is .daed era m<br class="calibre9" />i is 37 , message[i] is e , translated is .daed era me<br class="calibre9" />i is 36 , message[i] is h , translated is .daed era meh<br class="calibre9" />i is 35 , message[i] is t , translated is .daed era meht<br class="calibre9" /><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-905"></span>i is 34 , message[i] is&nbsp;&nbsp;&nbsp;, translated is .daed era meht<br class="calibre9" />i is 33 , message[i] is f , translated is .daed era meht f<br class="calibre9" />i is 32 , message[i] is o , translated is .daed era meht fo<br class="calibre9" />i is 31 , message[i] is&nbsp;&nbsp;&nbsp;, translated is .daed era meht fo<br class="calibre9" />i is 30 , message[i] is o , translated is .daed era meht fo o<br class="calibre9" />i is 29 , message[i] is w , translated is .daed era meht fo ow<br class="calibre9" />i is 28 , message[i] is t , translated is .daed era meht fo owt<br class="calibre9" />i is 27 , message[i] is&nbsp;&nbsp;&nbsp;, translated is .daed era meht fo owt<br class="calibre9" />i is 26 , message[i] is f , translated is .daed era meht fo owt f<br class="calibre9" />i is 25 , message[i] is i , translated is .daed era meht fo owt fi<br class="calibre9" />i is 24 , message[i] is&nbsp;&nbsp;&nbsp;, translated is .daed era meht fo owt fi<br class="calibre9" />i is 23 , message[i] is , , translated is .daed era meht fo owt fi ,<br class="calibre9" />i is 22 , message[i] is t , translated is .daed era meht fo owt fi ,t<br class="calibre9" />i is 21 , message[i] is e , translated is .daed era meht fo owt fi ,te<br class="calibre9" />i is 20 , message[i] is r , translated is .daed era meht fo owt fi ,ter<br class="calibre9" />i is 19 , message[i] is c , translated is .daed era meht fo owt fi ,terc<br class="calibre9" />i is 18 , message[i] is e , translated is .daed era meht fo owt fi ,terce<br class="calibre9" />i is 17 , message[i] is s , translated is .daed era meht fo owt fi ,terces<br class="calibre9" />i is 16 , message[i] is&nbsp;&nbsp;&nbsp;, translated is .daed era meht fo owt fi ,terces<br class="calibre9" />i is 15 , message[i] is a , translated is .daed era meht fo owt fi ,terces a<br class="calibre9" />i is 14 , message[i] is&nbsp;&nbsp;&nbsp;, translated is .daed era meht fo owt fi ,terces a<br class="calibre9" />i is 13 , message[i] is p , translated is .daed era meht fo owt fi ,terces a p<br class="calibre9" />i is 12 , message[i] is e , translated is .daed era meht fo owt fi ,terces a pe<br class="calibre9" />i is 11 , message[i] is e , translated is .daed era meht fo owt fi ,terces a pee<br class="calibre9" />i is 10 , message[i] is k , translated is .daed era meht fo owt fi ,terces a peek<br class="calibre9" />i is 9 , message[i] is&nbsp;&nbsp;&nbsp;, translated is .daed era meht fo owt fi ,terces a peek<br class="calibre9" />i is 8 , message[i] is n , translated is .daed era meht fo owt fi ,terces a peek n<br class="calibre9" />i is 7 , message[i] is a , translated is .daed era meht fo owt fi ,terces a peek na<br class="calibre9" />i is 6 , message[i] is c , translated is .daed era meht fo owt fi ,terces a peek nac<br class="calibre9" />i is 5 , message[i] is&nbsp;&nbsp;&nbsp;, translated is .daed era meht fo owt fi ,terces a peek nac<br class="calibre9" />i is 4 , message[i] is e , translated is .daed era meht fo owt fi ,terces a peek nac e<br class="calibre9" />i is 3 , message[i] is e , translated is .daed era meht fo owt fi ,terces a peek nac ee<br class="calibre9" />i is 2 , message[i] is r , translated is .daed era meht fo owt fi ,terces a peek nac eer<br class="calibre9" />i is 1 , message[i] is h , translated is .daed era meht fo owt fi ,terces a peek nac eerh<br class="calibre9" />i is 0 , message[i] is T , translated is .daed era meht fo owt fi ,terces a peek nac eerhT</p>
<p class="indent">The line of output, <span class="literal">"i is 48 , message[i] is . , translated is ."</span>, shows what the expressions <span class="literal">i</span>, <span class="literal">message[i]</span>, and <span class="literal">translated</span> evaluate to after the string <span class="literal">message[i]</span> has been added to the end of <span class="literal">translated</span> but before <span class="literal">i</span> is decremented. You can see that the first time the program execution goes through the loop, <span class="literal">i</span> is set to <span class="literal">48</span>, so <span class="literal">message[i]</span> (that is, <span class="literal">message[48]</span>) is the string <span class="literal">'.'</span>. The <span class="literal">translated</span> variable started as a blank string, but when <span class="literal">message[i]</span> was added to the end of it on line 9, it became the string value <span class="literal">'.'</span>.</p>
<p class="indent">On the next iteration of the loop, the output is <span class="literal">"i is 47 , message[i] is d , translated is .d"</span>. You can see that <span class="literal">i</span> has been decremented from <span class="literal">48</span> to <span class="literal">47</span>, so now <span class="literal">message[i]</span> is <span class="literal">message[47]</span>, which is the <span class="literal">'d'</span> string. (That’s the second <span class="literal">'d'</span> in <span class="literal">'</span><span class="literal">dead'</span>.) This <span class="literal">'d'</span> gets added to the end of <span class="literal">translated</span>, so <span class="literal">translated</span> is now the value <span class="literal">'.d'</span>.</p>
<p class="indent">Now you can see how the <span class="literal">translated</span> variable’s string is slowly “grown” from a blank string to the reversed <span class="literal">message</span>.</p>
<h3 class="h1" id="calibre_link-496"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-260" class="calibre1"></span><strong class="calibre3">Improving the Program with an input() Prompt</strong></h3>
<p class="noindent">The programs in this book are all designed so the strings that are being encrypted or decrypted are typed directly into the source code as assignment statements. This is convenient while we’re developing the programs, but you shouldn’t expect users to be comfortable modifying the source code themselves. To make the programs easier to use and share, you can modify the assignment statements so they call the <span class="literal">input()</span> function. You can also pass a string to <span class="literal">input()</span> so it will display a prompt for the user to enter a string to encrypt. For example, change line 4 in <em class="calibre7">reverseCipher.py</em> to this:</p>
<p class="programs1">&nbsp;4. message = <span class="codestrong">input('Enter message: ')</span></p>
<p class="indent">When you run the program, it prints the prompt to the screen and waits for the user to enter a message. The message that the user enters will be the string value that is stored in the <span class="literal">message</span> variable. When you run the program now, you can put in any string you’d like and get output like this:</p>
<p class="programs1">Enter message: <span class="codestrong">Hello, world!</span><br class="calibre9" />!dlrow ,olleH</p>
<h3 class="h1" id="calibre_link-497"><strong class="calibre3">Summary</strong></h3>
<p class="noindent">We’ve just completed our second program, which manipulates a string into a new string using techniques from <a href="#calibre_link-18" class="calibre8">Chapter 3</a>, such as indexing and concatenation. A key part of the program was the <span class="literal">len()</span> function, which takes a string argument and returns an integer of how many characters are in the string.</p>
<p class="indent">You also learned about the Boolean data type, which has only two values, <span class="literal">True</span> and <span class="literal">False</span>. Comparison operators <span class="literal">==</span>, <span class="literal">!=</span>, <span class="literal">&lt;</span>, <span class="literal">&gt;</span>, <span class="literal">&lt;=</span>, and <span class="literal">&gt;=</span> can compare two values and evaluate to a Boolean value.</p>
<p class="indent">Conditions are expressions that use comparison operators and evaluate to a Boolean data type. They are used in <span class="literal">while</span> loops, which will execute code in the block following the <span class="literal">while</span> statement until the condition evaluates as <span class="literal">False</span>. A block is made up of lines with the same level of indentation, including any blocks inside them.</p>
<p class="indent">Now that you’ve learned how to manipulate text, you can start making programs that the user can run and interact with. This is important because text is the main way the user and the computer communicate with each other.</p>
<div class="sidebar">
<p class="sidebart" id="calibre_link-498"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-906"></span><strong class="calibre5">PRACTICE QUESTIONS</strong></p>
<p class="noindent">Answers to the practice questions can be found on the book’s website at <em class="calibre7"><a href="https://www.nostarch.com/crackingcodes/" class="calibre8">https://www.nostarch.com/crackingcodes/</a></em>.</p>
<ol class="calibre13">
<li value="1" class="calibre11"><p class="noindent">What does the following piece of code print to the screen?</p>
<p class="programs1">print(len('Hello') + len('Hello'))</p>
</li>
<li value="2" class="calibre11"><p class="noindent">What does this code print?</p>
<p class="programs1">i = 0<br class="calibre9" />while i &lt; 3:<br class="calibre9" />&nbsp;&nbsp;&nbsp;&nbsp;print('Hello')<br class="calibre9" />&nbsp;&nbsp;&nbsp;&nbsp;i = i + 1</p>
</li>
<li value="3" class="calibre11"><p class="noindent">How about this code?</p>
<p class="programs1">i = 0<br class="calibre9" />spam = 'Hello'<br class="calibre9" />while i &lt; 5:<br class="calibre9" />&nbsp;&nbsp;&nbsp;&nbsp;spam = spam + spam[i]<br class="calibre9" />&nbsp;&nbsp;&nbsp;&nbsp;i = i + 1<br class="calibre9" />print(spam)</p>
</li>
<li value="4" class="calibre11"><p class="noindent">And this?</p>
<p class="programs1">i = 0<br class="calibre9" />while i &lt; 4:<br class="calibre9" />&nbsp;&nbsp;&nbsp;&nbsp;while i &lt; 6:<br class="calibre9" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = i + 2<br class="calibre9" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(i)<span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-907"></span></p>
</li>
</ol>
</div>
</div>
