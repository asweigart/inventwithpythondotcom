


<div><a target="_blank" href="https://www.amazon.com/gp/product/1593278225/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1593278225&linkCode=as2&tag=playwithpyth-20&linkId=bf3b22819f0886d277e88b8a653b81ad">
<img src="images/cover_crackingcodes_thumb.png" /><br />Buy the print or ebook online.</a></div>
<div><a href="chapter5.html">Previous Chapter - The Caesar Cipher</a> | <a href="chapter7.html">Next Chapter - Encrypting with the Transposition Cipher</a></div>
<div id="calibre_link-1" class="calibre">
<h2 class="h2a1" id="calibre_link-20"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-146" class="calibre1"></span><span class="big">6</span><br class="calibre15" />HACKING THE CAESAR CIPHER WITH BRUTE-FORCE</h2>
<p class="epigraph"><em class="calibre7">“Arab scholars . . . invented cryptanalysis, the science of unscrambling a message without knowledge of the key.”<br class="calibre9" />&mdash;Simon Singh,</em> The Code Book</p>
<div class="image"><img src="images/00078.jpeg" alt="Images" class="calibre4" /></div>
<p class="noindent">We can hack the Caesar cipher by using a cryptanalytic technique called <em class="calibre7">brute-force</em>. A <em class="calibre7">brute-force attack</em> tries every possible decryption key for a cipher. Nothing stops a cryptanalyst from guessing one key, decrypting the ciphertext with that key, looking at the output, and then moving on to the next key if they didn’t find the secret message. Because the brute-force technique is so effective against the Caesar cipher, you shouldn’t actually use the Caesar cipher to encrypt secret information.</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-152"></span>Ideally, the ciphertext would never fall into anyone’s hands. But <em class="calibre7">Kerckhoffs’s principle</em> (named after the 19th-century cryptographer Auguste Kerckhoffs) states that a cipher should still be secure even if everyone knows how the cipher works and someone else has the ciphertext. This principle was restated by the 20th-century mathematician Claude Shannon as <em class="calibre7">Shannon’s maxim</em>: “The enemy knows the system.” The part of the cipher that keeps the message secret is the key, and for the Caesar cipher this information is very easy to find.</p>
<div class="sidebar">
<p class="sidebart"><strong class="calibre5">TOPICS COVERED IN THIS CHAPTER</strong></p>
<ul class="calibre10">
<li class="calibre11"><p class="noindent">Kerckhoffs’s principle and Shannon’s maxim</p></li>
<li class="calibre11"><p class="noindent">The brute-force technique</p></li>
<li class="calibre11"><p class="noindent">The <span class="literal">range()</span> function</p></li>
<li class="calibre11"><p class="noindent">String formatting (string interpolation)</p></li>
</ul>
</div>
<h3 class="h1" id="calibre_link-518"><strong class="calibre3">Source Code for the Caesar Cipher Hacker Program</strong></h3>
<p class="noindent">Open a new file editor window by selecting <strong class="calibre5">File</strong><span class="ent">▸</span><strong class="calibre5">New File</strong>. Enter the following code into the file editor and save it as <em class="calibre7">caesarHacker.py</em>. Then download the <em class="calibre7">pyperclip.py</em> module if you haven’t already (<a href="https://www.nostarch.com/crackingcodes/" class="calibre8"><em class="calibre7">https://www.nostarch.com/crackingcodes/</em></a>) and place it in the same directory (that is, the same folder) as the <em class="calibre7">caesarCipher.py</em> file. This module will be imported by <em class="calibre7">caesarCipher.py</em>.</p>
<p class="indent">When you’re finished setting up the files, press F5 to run the program. If you run into any errors or problems with your code, you can compare it to the code in the book using the online diff tool at <a href="https://www.nostarch.com/crackingcodes/" class="calibre8"><em class="calibre7">https://www.nostarch.com/crackingcodes/</em></a>.</p>
<p class="noindentz"><em class="calibre7">caesarHacker.py</em></p>
<p class="programs1">&nbsp;1. # Caesar Cipher Hacker<br class="calibre9" />&nbsp;2. # https://www.nostarch.com/crackingcodes/ (BSD Licensed)<br class="calibre9" />&nbsp;3.<br class="calibre9" />&nbsp;4. message = 'guv6Jv6Jz!J6rp5r7Jzr66ntrM'<br class="calibre9" />&nbsp;5. SYMBOLS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz12345<br class="calibre9" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;67890 !?.'<br class="calibre9" />&nbsp;6.<br class="calibre9" />&nbsp;7. # Loop through every possible key:<br class="calibre9" />&nbsp;8. for key in range(len(SYMBOLS)):<br class="calibre9" />&nbsp;9.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# It is important to set translated to the blank string so that the<br class="calibre9" />10.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# previous iteration's value for translated is cleared:<br class="calibre9" />11.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translated = ''<br class="calibre9" />12.<br class="calibre9" />13.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# The rest of the program is almost the same as the Caesar program:<br class="calibre9" />14.<br class="calibre9" /><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-153"></span>15.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Loop through each symbol in message:<br class="calibre9" />16.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for symbol in message:<br class="calibre9" />17.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if symbol in SYMBOLS:<br class="calibre9" />18.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symbolIndex = SYMBOLS.find(symbol)<br class="calibre9" />19.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translatedIndex = symbolIndex - key<br class="calibre9" />20.<br class="calibre9" />21.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Handle the wraparound:<br class="calibre9" />22.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if translatedIndex &lt; 0:<br class="calibre9" />23.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translatedIndex = translatedIndex + len(SYMBOLS)<br class="calibre9" />24.<br class="calibre9" />25.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Append the decrypted symbol:<br class="calibre9" />26.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translated = translated + SYMBOLS[translatedIndex]<br class="calibre9" />27.<br class="calibre9" />28.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br class="calibre9" />29.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Append the symbol without encrypting/decrypting:<br class="calibre9" />30.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translated = translated + symbol<br class="calibre9" />31.<br class="calibre9" />32.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Display every possible decryption:<br class="calibre9" />33.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('Key #%s: %s' % (key, translated))</p>
<p class="indent">Notice that much of this code is the same as the code in the original Caesar cipher program. This is because the Caesar cipher hacker program uses the same steps to decrypt the message.</p>
<h3 class="h1" id="calibre_link-519"><strong class="calibre3">Sample Run of the Caesar Cipher Hacker Program</strong></h3>
<p class="noindent">The Caesar cipher hacker program prints the following output when you run it. It breaks the ciphertext <span class="literal">guv6Jv6Jz!J6rp5r7Jzr66ntrM</span> by decrypting the ciphertext with all 66 possible keys:</p>
<p class="programs1">Key #0: guv6Jv6Jz!J6rp5r7Jzr66ntrM<br class="calibre9" />Key #1: ftu5Iu5Iy I5qo4q6Iyq55msqL<br class="calibre9" />Key #2: est4Ht4Hx0H4pn3p5Hxp44lrpK<br class="calibre9" />Key #3: drs3Gs3Gw9G3om2o4Gwo33kqoJ<br class="calibre9" />Key #4: cqr2Fr2Fv8F2nl1n3Fvn22jpnI<br class="calibre9" /><span class="codeitalic">--snip--</span><br class="calibre9" />Key #11: Vjku?ku?o1?ugetgv?oguucigB<br class="calibre9" />Key #12: Uijt!jt!nz!tfdsfu!nfttbhfA<br class="calibre9" />Key #13: This is my secret message.<br class="calibre9" />Key #14: Sghr0hr0lx0rdbqds0ldrrZfd?<br class="calibre9" />Key #15: Rfgq9gq9kw9qcapcr9kcqqYec!<br class="calibre9" /><span class="codeitalic">--snip--</span><br class="calibre9" />Key #61: lz1 O1 O5CO wu0w!O5w&nbsp;&nbsp;sywR<br class="calibre9" />Key #62: kyz0Nz0N4BN0vt9v N4v00rxvQ<br class="calibre9" />Key #63: jxy9My9M3AM9us8u0M3u99qwuP<br class="calibre9" />Key #64: iwx8Lx8L2.L8tr7t9L2t88pvtO<br class="calibre9" />Key #65: hvw7Kw7K1?K7sq6s8K1s77ousN</p>
<p class="indent">Because the decrypted output for key <span class="literal">13</span> is plain English, we know the original encryption key must have been <span class="literal">13</span>.</p>
<h3 class="h1" id="calibre_link-520"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-273" class="calibre1"></span><strong class="calibre3">Setting Up Variables</strong></h3>
<p class="noindent">The hacker program will create a <span class="literal">message</span> variable that stores the ciphertext string the program tries to decrypt. The <span class="literal">SYMBOLS</span> constant variable contains every character that the cipher can encrypt:</p>
<p class="programs1">&nbsp;1. # Caesar Cipher Hacker<br class="calibre9" />&nbsp;2. # https://www.nostarch.com/crackingcodes/ (BSD Licensed)<br class="calibre9" />&nbsp;3.<br class="calibre9" />&nbsp;4. message = 'guv6Jv6Jz!J6rp5r7Jzr66ntrM'<br class="calibre9" />&nbsp;5. SYMBOLS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz12345<br class="calibre9" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;67890 !?.'</p>
<p class="indent">The value for <span class="literal">SYMBOLS</span> needs to be the same as the value for <span class="literal">SYMBOLS</span> used in the Caesar cipher program that encrypted the ciphertext we’re trying to hack; otherwise, the hacker program won’t work. Note that there is a single space between the <span class="literal">0</span> and <span class="literal">!</span> in the string value.</p>
<h3 class="h1" id="calibre_link-521"><strong class="calibre3">Looping with the range() Function</strong></h3>
<p class="noindent">Line 8 is a <span class="literal">for</span> loop that doesn’t iterate over a string value but instead iterates over the return value from a call to the <span class="literal">range()</span> function:</p>
<p class="programs1">&nbsp;7. # Loop through every possible key:<br class="calibre9" />&nbsp;8. for key in range(len(SYMBOLS)):</p>
<p class="indent">The <span class="literal">range()</span> function takes one integer argument and returns a value of the <span class="literal">range</span> data type. Range values can be used in <span class="literal">for</span> loops to loop a specific number of times according to the integer you give the function. Let’s try an example. Enter the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">for i in range(3):</span><br class="calibre9" />...&nbsp;&nbsp;&nbsp;<span class="codestrong">print('Hello')</span><br class="calibre9" />...<br class="calibre9" />Hello<br class="calibre9" />Hello<br class="calibre9" />Hello</p>
<p class="indent">The <span class="literal">for</span> loop will loop three times because we passed the integer <span class="literal">3</span> to <span class="literal">range()</span>.</p>
<p class="indent">More specifically, the range value returned from the <span class="literal">range()</span> function call will set the <span class="literal">for</span> loop’s variable to the integers from <span class="literal">0</span> to (but not including) the argument passed to <span class="literal">range()</span>. For example, enter the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">for i in range(6):</span><br class="calibre9" />...&nbsp;&nbsp;&nbsp;<span class="codestrong">print(i)</span><br class="calibre9" />...<br class="calibre9" />0<br class="calibre9" />1<br class="calibre9" /><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-274"></span>2<br class="calibre9" />3<br class="calibre9" />4<br class="calibre9" />5</p>
<p class="indent">This code sets the variable <span class="literal">i</span> to the values from <span class="literal">0</span> to (but not including) <span class="literal">6</span>, which is similar to what line 8 in <em class="calibre7">caesarHacker.py</em> does. Line 8 sets the <span class="literal">key</span> variable with the values from <span class="literal">0</span> to (but not including) <span class="literal">66</span>. Instead of hard-coding the value <span class="literal">66</span> directly into our program, we use the return value from <span class="literal">len(SYMBOLS)</span> so the program will still work if we modify <span class="literal">SYMBOLS</span>.</p>
<p class="indent">The first time the program execution goes through this loop, <span class="literal">key</span> is set to <span class="literal">0</span>, and the ciphertext in <span class="literal">message</span> is decrypted with key <span class="literal">0</span>. (Of course, if <span class="literal">0</span> is not the real key, <span class="literal">message</span> just “decrypts” to nonsense.) The code inside the <span class="literal">for</span> loop from lines 9 through 31, which we’ll explain next, are similar to the original Caesar cipher program and do the decrypting. On the next iteration of line 8’s <span class="literal">for</span> loop, <span class="literal">key</span> is set to <span class="literal">1</span> for the decryption.</p>
<p class="indent">Although we won’t use it in this program, you can also pass two integer arguments to the <span class="literal">range()</span> function instead of just one. The first argument is where the range should start, and the second argument is where the range should stop (up to but not including the second argument). The arguments are separated by a comma:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">for i in range(2, 6):</span><br class="calibre9" />...&nbsp;&nbsp;&nbsp;<span class="codestrong">print(i)</span><br class="calibre9" />...<br class="calibre9" />2<br class="calibre9" />3<br class="calibre9" />4<br class="calibre9" />5</p>
<p class="indent">The variable <span class="literal">i</span> will take the value from <span class="literal">2</span> (including <span class="literal">2</span>) up to the value <span class="literal">6</span> (but not including <span class="literal">6)</span>.</p>
<h3 class="h1" id="calibre_link-522"><strong class="calibre3">Decrypting the Message</strong></h3>
<p class="noindent">The decryption code in the next few lines adds the decrypted text to the end of the string in <span class="literal">translated</span>. On line 11, <span class="literal">translated</span> is set to a blank string:</p>
<p class="programs1">&nbsp;7. # Loop through every possible key:<br class="calibre9" />&nbsp;8. for key in range(len(SYMBOLS)):<br class="calibre9" />&nbsp;9.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# It is important to set translated to the blank string so that the<br class="calibre9" />10.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# previous iteration's value for translated is cleared:<br class="calibre9" />11.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translated = ''</p>
<p class="indent">It’s important that we reset <span class="literal">translated</span> to a blank string at the beginning of this <span class="literal">for</span> loop; otherwise, the text that was decrypted with the <span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-912"></span>current key will be added to the decrypted text in <span class="literal">translated</span> from the last iteration in the loop.</p>
<p class="indent">Lines 16 to 30 are almost the same as the code in the Caesar cipher program in <a href="#calibre_link-2" class="calibre8">Chapter 5</a> but are slightly simpler because this code only has to decrypt:</p>
<p class="programs1">13.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# The rest of the program is almost the same as the Caesar program:<br class="calibre9" />14.<br class="calibre9" />15.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Loop through each symbol in message:<br class="calibre9" />16.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for symbol in message:<br class="calibre9" />17.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if symbol in SYMBOLS:<br class="calibre9" />18.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symbolIndex = SYMBOLS.find(symbol)</p>
<p class="indent">In line 16, we loop through every symbol in the ciphertext string stored in <span class="literal">message</span>. On each iteration of this loop, line 17 checks whether <span class="literal">symbol</span> exists in the <span class="literal">SYMBOLS</span> constant variable and, if so, decrypts it. Line 18’s <span class="literal">find()</span> method call locates the index where <span class="literal">symbol</span> is in <span class="literal">SYMBOLS</span> and stores it in a variable called <span class="literal">symbolIndex</span>.</p>
<p class="indent">Then we subtract the <span class="literal">key</span> from <span class="literal">symbolIndex</span> on line 19 to decrypt:</p>
<p class="programs1">19.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translatedIndex = symbolIndex - key<br class="calibre9" />20.<br class="calibre9" />21.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Handle the wraparound:<br class="calibre9" />22.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if translatedIndex &lt; 0:<br class="calibre9" />23.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translatedIndex = translatedIndex + len(SYMBOLS)</p>
<p class="indent">This subtraction operation may cause <span class="literal">translatedIndex</span> to become less than zero and require us to “wrap around” the <span class="literal">SYMBOLS</span> constant when we find the position of the character in <span class="literal">SYMBOLS</span> to decrypt to. Line 22 checks for this case, and line 23 adds <span class="literal">66</span> (which is what <span class="literal">len(SYMBOLS)</span> returns) if <span class="literal">translatedIndex</span> is less than <span class="literal">0</span>.</p>
<p class="indent">Now that <span class="literal">translatedIndex</span> has been modified, <span class="literal">SYMBOLS[translatedIndex]</span> will evaluate to the decrypted symbol. Line 26 adds this symbol to the end of the string stored in <span class="literal">translated</span>:</p>
<p class="programs1">25.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Append the decrypted symbol:<br class="calibre9" />26.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translated = translated + SYMBOLS[translatedIndex]<br class="calibre9" />27.<br class="calibre9" />28.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br class="calibre9" />29.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Append the symbol without encrypting/decrypting:<br class="calibre9" />30.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translated = translated + symbol</p>
<p class="indent">Line 30 just adds the unmodified <span class="literal">symbol</span> to the end of <span class="literal">translated</span> if the value was not found in the <span class="literal">SYMBOL</span> set.</p>
<h3 class="h1" id="calibre_link-523"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-94" class="calibre1"></span><strong class="calibre3">Using String Formatting to Display the Key and Decrypted Messages</strong></h3>
<p class="noindent">Although line 33 is the only <span class="literal">print()</span> function call in our Caesar cipher hacker program, it will execute several lines because it gets called once per iteration of the <span class="literal">for</span> loop in line 8:</p>
<p class="programs1">32.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Display every possible decryption:<br class="calibre9" />33.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('Key #%s: %s' % (key, translated))</p>
<p class="indent">The argument for the <span class="literal">print()</span> function call is a string value that uses <em class="calibre7">string formatting</em> (also called <em class="calibre7">string interpolation</em>). String formatting with the <span class="literal">%s</span> text places one string inside another one. The first <span class="literal">%s</span> in the string gets replaced by the first value in the parentheses at the end of the string.</p>
<p class="indent">Enter the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">'Hello %s!' % ('world')</span><br class="calibre9" />'Hello world!'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'Hello ' + 'world' + '!'</span><br class="calibre9" />'Hello world!'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'The %s ate the %s that ate the %s.' % ('dog', 'cat', 'rat')</span><br class="calibre9" />'The dog ate the cat that ate the rat.'</p>
<p class="indent">In this example, first the string <span class="literal">'world'</span> is inserted into the string <span class="literal">'Hello %s!'</span> in place of the <span class="literal">%s</span>. It works as though you had concatenated the part of the string before the <span class="literal">%s</span> with the interpolated string and the part of the string after the <span class="literal">%s</span>. When you interpolate multiple strings, they replace each <span class="literal">%s</span> in order.</p>
<p class="indent">String formatting is often easier to type than string concatenation using the <span class="literal">+</span> operator, especially for large strings. And, unlike with string concatenation, you can insert non-string values such as integers into the string. Enter the following into the interactive shell:</p>
<p class="programs1">&gt;&gt;&gt; <span class="codestrong">'%s had %s pies.' % ('Alice', 42)</span><br class="calibre9" />'Alice had 42 pies.'<br class="calibre9" />&gt;&gt;&gt; <span class="codestrong">'Alice' + ' had ' + 42 + ' pies.'</span><br class="calibre9" />Traceback (most recent call last):<br class="calibre9" />&nbsp;&nbsp;File "&lt;stdin&gt;", line 1, in &lt;module&gt;<br class="calibre9" />TypeError: Can't convert 'int' object to str implicitly</p>
<p class="indent">The integer <span class="literal">42</span> is inserted into the string without any issues when you use interpolation, but when you try to concatenate the integer, it causes an error.</p>
<p class="indent">Line 33 of <em class="calibre7">caesarHacker.py</em> uses string formatting to create a string that has the values in both the <span class="literal">key</span> and <span class="literal">translated</span> variables. Because <span class="literal">key</span> stores an integer value, we use string formatting to put it in a string value that is passed to <span class="literal">print()</span>.</p>
<h3 class="h1" id="calibre_link-524"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-913" class="calibre1"></span><strong class="calibre3">Summary</strong></h3>
<p class="noindent">The critical weakness of the Caesar cipher is that there aren’t many possible keys that can be used to encrypt. Any computer can easily decrypt with all 66 possible keys, and it takes a cryptanalyst only a few seconds to look through the decrypted messages to find the one in English. To make our messages more secure, we need a cipher that has more potential keys. The transposition cipher discussed in <a href="#calibre_link-3" class="calibre8">Chapter 7</a> can provide this security for us.</p>
<div class="sidebar">
<p class="sidebart" id="calibre_link-525"><strong class="calibre5">PRACTICE QUESTION</strong></p>
<p class="noindent">Answers to the practice questions can be found on the book’s website at <em class="calibre7"><a href="https://www.nostarch.com/crackingcodes/" class="calibre8">https://www.nostarch.com/crackingcodes/</a></em>.</p>
<ol class="calibre13">
<li value="1" class="calibre11"><p class="noindent">Break the following ciphertext, decrypting one line at a time because each line has a different key. Remember to escape any quote characters:</p>
<p class="programs1">qeFIP?eGSeECNNS,<br class="calibre9" />5coOMXXcoPSZIWoQI,<br class="calibre9" />avnl1olyD4l'ylDohww6DhzDjhuDil,<br class="calibre9" /><br class="calibre9" />z.GM?.cEQc. 70c.7KcKMKHA9AGFK,<br class="calibre9" />?MFYp2pPJJUpZSIJWpRdpMFY,<br class="calibre9" />ZqH8sl5HtqHTH4s3lyvH5zH5spH4t pHzqHlH3l5K<br class="calibre9" /><br class="calibre9" />Zfbi,!tif!xpvme!qspcbcmz!fbu!nfA</p>
</li>
</ol>
</div>
</div>
