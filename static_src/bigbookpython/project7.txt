


<div type="bodymatter chapter" class="calibre1" id="calibre_link-60">
<section class="toclist">
<header class="calibre10">
<h1 class="chapter">
<span class="chapternumber"><span type="pagebreak" title="33" id="calibre_link-401" class="calibre11"></span>#7</span><br class="calibre14" />
<span class="chaptertitle">Caesar Hacker</span></h1>
</header>
<figure class="opener">
<img src="images/000002.png" alt="" class="calibre12" />
</figure>
<p class="chapterintro">This program can hack messages encrypted with the Caesar cipher from Project 6, even if you don’t know the key. There are only 26 possible keys for the Caesar cipher, so a computer can easily try all possible decryptions and display the results to the user. In cryptography, we call this technique a <em class="calibre9">brute-force attack</em>. If you’d like to learn more about ciphers and code breaking, you can read my book <em class="calibre9">Cracking Codes with Python</em> (No Starch Press, 2018; <a href="https://nostarch.com/crackingcodes/" class="linkurl">https://nostarch.com/crackingcodes/</a>).</p>
<h2 id="calibre_link-61" class="calibre5"><span type="pagebreak" title="34" id="calibre_link-402" class="calibre15"></span>The Program in Action</h2>
<p class="bodyfirst">When you run <em class="calibre9">caesarhacker.py</em>, the output will look like this:</p>
<pre class="calibre24"><code class="calibre22">Caesar Cipher Hacker, by Al Sweigart al@inventwithpython.com
Enter the encrypted Caesar cipher message to hack.
&gt; <b class="calibre6">QIIX QI FC XLI VSWI FYWLIW XSRMKLX.</b>
Key #0: QIIX QI FC XLI VSWI FYWLIW XSRMKLX.
Key #1: PHHW PH EB WKH URVH EXVKHV WRQLJKW.
Key #2: OGGV OG DA VJG TQUG DWUJGU VQPKIJV.
Key #3: NFFU NF CZ UIF SPTF CVTIFT UPOJHIU.
Key #4: MEET ME BY THE ROSE BUSHES TONIGHT.
Key #5: LDDS LD AX SGD QNRD ATRGDR SNMHFGS.
Key #6: KCCR KC ZW RFC PMQC ZSQFCQ RMLGEFR.
<var class="calibre27">--snip--</var></code></pre>
<h2 id="calibre_link-62" class="calibre5">How It Works</h2>
<p class="bodyfirst">Note that lines 20 to 36 in this program are nearly identical to lines 55 to 78 in the Caesar cipher program. The hacking program implements the same decryption code, except that it does so in a <code class="calibre22">for</code> loop, which runs the code for every possible key.</p>
<p class="calibre19">Unfortunately, the hacking program isn’t sophisticated enough to identify when it has found the correct key. It relies on a human to read the output and identify which decryption produced the original English (or whichever written language was encrypted). Chapter 11 of the book <em class="calibre9">Cracking Codes with Python</em> (No Starch Press, 2018) details how you can write Python code to detect English messages.</p>
<pre class="calibre24"><code class="calibre22"> 1. """Caesar Cipher Hacker, by Al Sweigart al@inventwithpython.com
 2. This program hacks messages encrypted with the Caesar cipher by doing
 3. a brute force attack against every possible key.
 4. More info at:
 5. https://en.wikipedia.org/wiki/Caesar_cipher#Breaking_the_cipher
 6. View this code at https://nostarch.com/big-book-small-python-projects
 7. Tags: tiny, beginner, cryptography, math"""
 8.
 9. print('Caesar Cipher Hacker, by Al Sweigart al@inventwithpython.com')
10.
11. # Let the user specify the message to hack:
12. print('Enter the encrypted Caesar cipher message to hack.')
13. message = input('&gt; ')
14.
15. # Every possible symbol that can be encrypted/decrypted:
16. # (This must match the SYMBOLS used when encrypting the message.)
17. SYMBOLS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
18.
19. for key in range(len(SYMBOLS)):  # Loop through every possible key.
20.     translated = ''
21.
22.     # Decrypt each symbol in the message:
23.     for symbol in message:
<span type="pagebreak" title="35" id="calibre_link-403" class="calibre13"></span>24.         if symbol in SYMBOLS:
25.             num = SYMBOLS.find(symbol)  # Get the number of the symbol.
26.             num = num - key  # Decrypt the number.
27.
28.             # Handle the wrap-around if num is less than 0:
29.             if num &lt; 0:
30.                 num = num + len(SYMBOLS)
31.
32.             # Add decrypted number's symbol to translated:
33.             translated = translated + SYMBOLS[num]
34.         else:
35.             # Just add the symbol without decrypting:
36.             translated = translated + symbol
37.
38.     # Display the key being tested, along with its decrypted text:
39.     print('Key #{}: {}'.format(key, translated))</code></pre>
<p class="calibre19">After entering the source code and running it a few times, try making experimental changes to it. Keep in mind that the string stored in the <code class="calibre22">SYMBOLS</code> variable must match the <code class="calibre22">SYMBOLS</code> variable in the Caesar cipher program that produced the encrypted text.</p>
<h2 id="calibre_link-63" class="calibre5">Exploring the Program</h2>
<p class="bodyfirst">Try to find the answers to the following questions. Experiment with some modifications to the code and rerun the program to see what effect the changes have.</p>
<ol class="decimal">
<li value="1" class="calibre8">What error message do you get if you delete or comment out <code class="calibre22">translated = ''</code> on line 20?</li>
<li value="2" class="calibre8">What happens if you change <code class="calibre22">translated = translated + SYMBOLS[num]</code> on line 33 to <code class="calibre22">translated = translated + symbol</code>?</li>
<li value="3" class="calibre8">What happens if you enter an unencrypted message into the Caesar cipher hacker program?</li>
</ol>
</section>
</div>





