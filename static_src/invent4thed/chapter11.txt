
<div id="calibre_link-814" class="calibre">
<h2 class="h1" id="calibre_link-146"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-202" class="calibre1"></span><span class="big"><strong class="calibre2">11</strong></span><br class="calibre9" /><strong class="calibre2">THE BAGELS DEDUCTION GAME</strong></h2>
<div class="imagec"><img src="images/00016.jpeg" alt="image" class="calibre3" /></div>
<p class="noindentb">Bagels is a deduction game in which the player tries to guess a random three-digit number (with no repeating digits) generated by the computer. After each guess, the computer gives the player three types of clues:</p>
<p class="hang"><strong class="calibre5">Bagels</strong> None of the three digits guessed is in the secret number.</p>
<p class="hang"><strong class="calibre5">Pico</strong> One of the digits is in the secret number, but the guess has the digit in the wrong place.</p>
<p class="hang"><strong class="calibre5">Fermi</strong> The guess has a correct digit in the correct place.</p>
<p class="indentt">The computer can give multiple clues, which are sorted in alphabetical order. If the secret number is 456 and the player’s guess is 546, the clues would be “fermi pico pico.” The “fermi” is from the 6 and “pico pico” are from the 4 and 5.</p>
<p class="indent">In this chapter, you’ll learn a few new methods and functions that come with Python. You’ll also learn about augmented assignment operators and string interpolation. While they don’t let you do anything you couldn’t do before, they are nice shortcuts to make coding easier.</p>
<div class="sidebar">
<p class="sidebart"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-205" class="calibre1"></span><strong class="calibre2">TOPICS COVERED IN THIS CHAPTER</strong></p>
<p class="bull">• The <span class="literal1">random.shuffle()</span> function</p>
<p class="bull">• Augmented assignment operators, <span class="literal1">+=</span>, <span class="literal1">-=</span>, <span class="literal1">*=</span>, <span class="literal1">/=</span></p>
<p class="bull">• The <span class="literal1">sort()</span> list method</p>
<p class="bull">• The <span class="literal1">join()</span> string method</p>
<p class="bull">• String interpolation</p>
<p class="bull">• The conversion specifier <span class="literal1">%s</span></p>
<p class="bull">• Nested loops</p>
</div>
<h3 class="h2" id="calibre_link-577"><strong class="calibre2">Sample Run of Bagels</strong></h3>
<p class="noindent">Here’s what the user sees when they run the Bagels program. The text the player enters is shown in bold.</p>
<p class="programs">I am thinking of a 3-digit number. Try to guess what it is.<br class="calibre7" />The clues I give are...<br class="calibre7" />When I say:&nbsp;&nbsp;&nbsp;&nbsp;That means:<br class="calibre7" />&nbsp;&nbsp;Bagels&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;None of the digits is correct.<br class="calibre7" />&nbsp;&nbsp;Pico&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;One digit is correct but in the wrong position.<br class="calibre7" />&nbsp;&nbsp;Fermi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;One digit is correct and in the right position.<br class="calibre7" />I have thought up a number. You have 10 guesses to get it.<br class="calibre7" />Guess #1:<br class="calibre7" /><span class="codestrong">123</span><br class="calibre7" />Fermi<br class="calibre7" />Guess #2:<br class="calibre7" /><span class="codestrong">453</span><br class="calibre7" />Pico<br class="calibre7" />Guess #3:<br class="calibre7" /><span class="codestrong">425</span><br class="calibre7" />Fermi<br class="calibre7" />Guess #4:<br class="calibre7" /><span class="codestrong">326</span><br class="calibre7" />Bagels<br class="calibre7" />Guess #5:<br class="calibre7" /><span class="codestrong">489</span><br class="calibre7" />Bagels<br class="calibre7" />Guess #6:<br class="calibre7" /><span class="codestrong">075</span><br class="calibre7" />Fermi Fermi<br class="calibre7" />Guess #7:<br class="calibre7" /><span class="codestrong">015</span><br class="calibre7" />Fermi Pico<br class="calibre7" />Guess #8:<br class="calibre7" /><span class="codestrong">175</span><br class="calibre7" />You got it!<br class="calibre7" />Do you want to play again? (yes or no)<br class="calibre7" /><span class="codestrong">no</span></p>
<h3 class="h2" id="calibre_link-578"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-208" class="calibre1"></span><strong class="calibre2">Source Code for Bagels</strong></h3>
<p class="noindent">In a new file, enter the following source code and save it as <em class="calibre6">bagels.py</em>. Then run the game by pressing F5. If you get errors, compare the code you typed to the book’s code with the online diff tool at <em class="calibre6"><a href="https://www.nostarch.com/inventwithpython#diff" class="calibre4">https://www.nostarch.com/inventwithpython#diff</a></em>.</p>
<div class="image"><img src="images/00020.jpeg" alt="image" class="calibre3" /></div>
<p class="sidenote"><em class="calibre6">bagels.py</em></p>
<p class="programs">&nbsp;1. import random<br class="calibre7" />&nbsp;2.<br class="calibre7" />&nbsp;3. NUM_DIGITS = 3<br class="calibre7" />&nbsp;4. MAX_GUESS = 10<br class="calibre7" />&nbsp;5.<br class="calibre7" />&nbsp;6. def getSecretNum():<br class="calibre7" />&nbsp;7.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Returns a string of unique random digits that is NUM_DIGITS long.<br class="calibre7" />&nbsp;8.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numbers = list(range(10))<br class="calibre7" />&nbsp;9.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;random.shuffle(numbers)<br class="calibre7" />10.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;secretNum = ''<br class="calibre7" />11.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for i in range(NUM_DIGITS):<br class="calibre7" />12.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;secretNum += str(numbers[i])<br class="calibre7" />13.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return secretNum<br class="calibre7" />14.<br class="calibre7" />15. def getClues(guess, secretNum):<br class="calibre7" />16.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Returns a string with the Pico, Fermi, &amp; Bagels clues to the user.<br class="calibre7" />17.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if guess == secretNum:<br class="calibre7" />18.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 'You got it!'<br class="calibre7" />19.<br class="calibre7" />20.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clues = []<br class="calibre7" />21.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for i in range(len(guess)):<br class="calibre7" />22.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if guess[i] == secretNum[i]:<br class="calibre7" />23.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clues.append('Fermi')<br class="calibre7" />24.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elif guess[i] in secretNum:<br class="calibre7" />25.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clues.append('Pico')<br class="calibre7" />26.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if len(clues) == 0:<br class="calibre7" />27.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 'Bagels'<br class="calibre7" />28.<br class="calibre7" />29.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clues.sort()<br class="calibre7" />30.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ' '.join(clues)<br class="calibre7" />31.<br class="calibre7" />32. def isOnlyDigits(num):<br class="calibre7" />33.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Returns True if num is a string of only digits. Otherwise, returns<br class="calibre7" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;False.<br class="calibre7" />34.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if num == '':<br class="calibre7" />35.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return False<br class="calibre7" />36.<br class="calibre7" />37.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for i in num:<br class="calibre7" />38.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if i not in '0 1 2 3 4 5 6 7 8 9'.split():<br class="calibre7" />39.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return False<br class="calibre7" />40.<br class="calibre7" />41.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return True<br class="calibre7" />42.<br class="calibre7" />43.<br class="calibre7" />44. print('I am thinking of a %s-digit number. Try to guess what it is.' %<br class="calibre7" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(NUM_DIGITS))<br class="calibre7" />45. print('The clues I give are...')<br class="calibre7" />46. print('When I say:&nbsp;&nbsp;&nbsp;&nbsp;That means:')<br class="calibre7" />47. print(' Bagels&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;None of the digits is correct.')<br class="calibre7" />48. print(' Pico&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;One digit is correct but in the wrong position.')<br class="calibre7" />49. print(' Fermi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;One digit is correct and in the right position.')<br class="calibre7" />50.<br class="calibre7" />51. while True:<br class="calibre7" />52.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;secretNum = getSecretNum()<br class="calibre7" />53.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('I have thought up a number. You have %s guesses to get it.' %<br class="calibre7" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(MAX_GUESS))<br class="calibre7" />54.<br class="calibre7" />55.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;guessesTaken = 1<br class="calibre7" />56.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while guessesTaken &lt;= MAX_GUESS:<br class="calibre7" />57.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;guess = ''<br class="calibre7" />58.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while len(guess) != NUM_DIGITS or not isOnlyDigits(guess):<br class="calibre7" />59.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('Guess #%s: ' % (guessesTaken))<br class="calibre7" />60.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;guess = input()<br class="calibre7" />61.<br class="calibre7" />62.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(getClues(guess, secretNum))<br class="calibre7" />63.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;guessesTaken += 1<br class="calibre7" />64.<br class="calibre7" />65.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if guess == secretNum:<br class="calibre7" />66.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br class="calibre7" />67.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if guessesTaken &gt; MAX_GUESS:<br class="calibre7" />68.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('You ran out of guesses. The answer was %s.' %<br class="calibre7" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(secretNum))<br class="calibre7" />69.<br class="calibre7" />70.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('Do you want to play again? (yes or no)')<br class="calibre7" />71.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not input().lower().startswith('y'):<br class="calibre7" />72.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break</p>
<h3 class="h2" id="calibre_link-579"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-203" class="calibre1"></span><strong class="calibre2">Flowchart for Bagels</strong></h3>
<p class="noindent">The flowchart in <a href="#calibre_link-815" class="calibre4">Figure 11-1</a> describes what happens in this game and the order in which each step can happen.</p>
<p class="indent">The flowchart for Bagels is pretty simple. The computer generates a secret number, the player tries to guess that number, and the computer gives the player clues based on their guess. This happens over and over again until the player either wins or loses. After the game finishes, whether the player won or not, the computer asks the player whether they want to play again.</p>
<div class="image"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-889"></span><img src="images/00086.jpeg" alt="image" class="calibre3" /></div>
<p class="figcap"><a id="calibre_link-815" class="calibre4"></a><em class="calibre6">Figure 11-1: Flowchart for the Bagels game</em></p>
<h3 class="h2" id="calibre_link-580"><strong class="calibre2">Importing random and Defining getSecretNum()</strong></h3>
<p class="noindent">At the start of the program, we’ll import the <span class="literal1">random</span> module and set up some global variables. Then we’ll define a function named <span class="literal1">getSecretNum()</span>.</p>
<p class="programs">1. import random<br class="calibre7" />2.<br class="calibre7" />3. NUM_DIGITS = 3<br class="calibre7" />4. MAX_GUESS = 10<br class="calibre7" />5.<br class="calibre7" />6. def getSecretNum():<br class="calibre7" />7.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Returns a string of unique random digits that is NUM_DIGITS long.</p>
<p class="indent">Instead of using the integer <span class="literal1">3</span> for the number of digits in the answer, we use the constant variable <span class="literal1">NUM_DIGITS</span>. The same goes for the number of guesses the player gets; we use the constant variable <span class="literal1">MAX_GUESS</span> instead of the integer <span class="literal1">10</span>. Now it will be easy to change the number of guesses or secret number digits. Just change the values at line 3 or 4, and the rest of the program will still work without any more changes.</p>
<p class="indent">The <span class="literal1">getSecretNum()</span> function generates a secret number that contains only unique digits. The Bagels game is much more fun if you don’t have duplicate digits in the secret number, such as <span class="literal1">'244'</span> or <span class="literal1">'333'</span>. We’ll use some new Python functions to make this happen in <span class="literal1">getSecretNum()</span>.</p>
<h3 class="h2" id="calibre_link-581"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-207" class="calibre1"></span><strong class="calibre2">Shuffling a Unique Set of Digits</strong></h3>
<p class="noindent">The first two lines of <span class="literal1">getSecretNum()</span> shuffle a set of nonrepeating numbers:</p>
<p class="programs">8.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numbers = list(range(10))<br class="calibre7" />9.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;random.shuffle(numbers)</p>
<p class="indent">Line 8’s <span class="literal1">list(range(10))</span> evaluates to <span class="literal1">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span>, so the <span class="literal1">numbers</span> variable contains a list of all 10 digits.</p>
<h4 class="h3" id="calibre_link-582"><em class="calibre10"><strong class="calibre2">Changing List Item Order with the random.shuffle() Function</strong></em></h4>
<p class="noindenta">The <span class="literal1">random.shuffle()</span> function randomly changes the order of a list’s items (in this case, the list of digits). This function doesn’t return a value but rather modifies the list you pass it <em class="calibre6">in place</em>. This is similar to the way the <span class="literal1">makeMove()</span> function in <a href="#calibre_link-12" class="calibre4">Chapter 10</a>’s Tic-Tac-Toe game modified the list it was passed in place, rather than returning a new list with the change. This is why you do <em class="calibre6">not</em> write code like <span class="literal1">numbers = random.shuffle(numbers)</span>.</p>
<p class="indent">Try experimenting with the <span class="literal1">shuffle()</span> function by entering the following code into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong">import random</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">spam = list(range(10))</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">print(spam)</span><br class="calibre7" />[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]<br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">random.shuffle(spam)</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">print(spam)</span><br class="calibre7" />[3, 0, 5, 9, 6, 8, 2, 4, 1, 7]<br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">random.shuffle(spam)</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">print(spam)</span><br class="calibre7" />[9, 8, 3, 5, 4, 7, 1, 2, 0, 6]</p>
<p class="indent">Each time <span class="literal1">random.shuffle()</span> is called on <span class="literal1">spam</span>, the items in the <span class="literal1">spam</span> list are shuffled. You’ll see how we use the <span class="literal1">shuffle()</span> function to make a secret number next.</p>
<h4 class="h3" id="calibre_link-583"><em class="calibre10"><strong class="calibre2">Getting the Secret Number from the Shuffled Digits</strong></em></h4>
<p class="noindenta">The secret number will be a string of the first <span class="literal1">NUM_DIGITS</span> digits of the shuffled list of integers:</p>
<p class="programs">10.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;secretNum = ''<br class="calibre7" />11.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for i in range(NUM_DIGITS):<br class="calibre7" />12.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;secretNum += str(numbers[i])<br class="calibre7" />13.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return secretNum</p>
<p class="indent">The <span class="literal1">secretNum</span> variable starts out as a blank string. The <span class="literal1">for</span> loop on line 11 iterates <span class="literal1">NUM_DIGITS</span> number of times. On each iteration through the loop, the integer at index <span class="literal1">i</span> is pulled from the shuffled list, converted to a string, and concatenated to the end of <span class="literal1">secretNum</span>.</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-152"></span>For example, if <span class="literal1">numbers</span> refers to the list <span class="literal1">[9, 8, 3, 5, 4, 7, 1, 2, 0, 6]</span>, then on the first iteration, <span class="literal1">numbers[0]</span> (that is, <span class="literal1">9</span>) will be passed to <span class="literal1">str()</span>; this returns <span class="literal1">'9'</span>, which is concatenated to the end of <span class="literal1">secretNum</span>. On the second iteration, the same happens with <span class="literal1">numbers[1]</span> (that is, <span class="literal1">8</span>), and on the third iteration the same happens with <span class="literal1">numbers[2]</span> (that is, <span class="literal1">3</span>). The final value of <span class="literal1">secretNum</span> that is returned is <span class="literal1">'983'</span>.</p>
<p class="indent">Notice that <span class="literal1">secretNum</span> in this function contains a string, not an integer. This may seem odd, but remember that you cannot concatenate integers. The expression <span class="literal1">9 + 8 + 3</span> evaluates to <span class="literal1">20</span>, but what you want is <span class="literal1">'9' + '8' + '3'</span>, which evaluates to <span class="literal1">'983'</span>.</p>
<h3 class="h2" id="calibre_link-584"><strong class="calibre2">Augmented Assignment Operators</strong></h3>
<p class="noindent">The <span class="literal1">+=</span> operator on line 12 is one of the <em class="calibre6">augmented assignment operators</em>. Normally, if you want to add or concatenate a value to a variable, you use code that looks like this:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong">spam = 42</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">spam = spam + 10</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">spam</span><br class="calibre7" />52<br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">eggs = 'Hello '</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">eggs = eggs + 'world!'</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">eggs</span><br class="calibre7" />'Hello world!'</p>
<p class="indent">The augmented assignment operators are shortcuts that free you from retyping the variable name. The following code does the same thing as the previous code:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong">spam = 42</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">spam += 10</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# The same as spam = spam + 10<br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">spam</span><br class="calibre7" />52<br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">eggs = 'Hello '</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">eggs += 'world!'</span> # The same as eggs = eggs + 'world!'<br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">eggs</span><br class="calibre7" />'Hello world!'</p>
<p class="indent">There are other augmented assignment operators as well. Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong">spam = 42</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">spam -= 2</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">spam</span><br class="calibre7" />40</p>
<p class="indent">The statement <span class="literal1">spam &ndash;= 2</span> is the same as the statement <span class="literal1">spam = spam &ndash; 2</span>, so the expression evaluates to <span class="literal1">spam = 42 &ndash; 2</span> and then to <span class="literal1">spam = 40</span>.</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-159"></span>There are augmented assignment operators for multiplication and division, too:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong">spam *= 3</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">spam</span><br class="calibre7" />120<br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">spam /= 10</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">spam</span><br class="calibre7" />12.0</p>
<p class="indent">The statement <span class="literal1">spam *= 3</span> is the same as <span class="literal1">spam = spam * 3</span>. So, since <span class="literal1">spam</span> was set equal to <span class="literal1">40</span> earlier, the full expression would be <span class="literal1">spam = 40 * 3</span>, which evaluates to <span class="literal1">120</span>. The expression <span class="literal1">spam /= 10</span> is the same as <span class="literal1">spam = spam / 10</span>, and <span class="literal1">spam = 120 / 10</span> evaluates to <span class="literal1">12.0</span>. Notice that <span class="literal1">spam</span> becomes a floating point number after it’s divided.</p>
<h3 class="h2" id="calibre_link-585"><strong class="calibre2">Calculating the Clues to Give</strong></h3>
<p class="noindent">The <span class="literal1">getClues()</span> function will return a string with fermi, pico, and bagels clues depending on the <span class="literal1">guess</span> and <span class="literal1">secretNum</span> parameters.</p>
<p class="programs">15. def getClues(guess, secretNum):<br class="calibre7" />16.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Returns a string with the Pico, Fermi, &amp; Bagels clues to the user.<br class="calibre7" />17.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if guess == secretNum:<br class="calibre7" />18.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 'You got it!'<br class="calibre7" />19.<br class="calibre7" />20.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clues = []<br class="calibre7" />21.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for i in range(len(guess)):<br class="calibre7" />22.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if guess[i] == secretNum[i]:<br class="calibre7" />23.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clues.append('Fermi')<br class="calibre7" />24.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elif guess[i] in secretNum:<br class="calibre7" />25.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clues.append('Pico')</p>
<p class="indent">The most obvious step is to check whether the guess is the same as the secret number, which we do in line 17. In that case, line 18 returns <span class="literal1">'You got it!'</span>.</p>
<p class="indent">If the guess isn’t the same as the secret number, the program must figure out what clues to give the player. The list in <span class="literal1">clues</span> will start empty and have <span class="literal1">'Fermi'</span> and <span class="literal1">'Pico'</span> strings added as needed.</p>
<p class="indent">The program does this by looping through each possible index in <span class="literal1">guess</span> and <span class="literal1">secretNum</span>. The strings in both variables will be the same length, so line 21 could have used either <span class="literal1">len(guess)</span> or <span class="literal1">len(secretNum)</span> and worked the same. As the value of <span class="literal1">i</span> changes from <span class="literal1">0</span> to <span class="literal1">1</span> to <span class="literal1">2</span>, and so on, line 22 checks whether the first, second, third, and so on character of <span class="literal1">guess</span> is the same as the character in the corresponding index of <span class="literal1">secretNum</span>. If so, line 23 adds the string <span class="literal1">'Fermi'</span> to <span class="literal1">clues</span>.</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-181"></span>Otherwise, line 24 checks whether the number at the <span class="literal1">i</span>th position in <span class="literal1">guess</span> exists anywhere in <span class="literal1">secretNum</span>. If so, you know that the number is somewhere in the secret number but not in the same position. In that case, line 25 then adds <span class="literal1">'Pico'</span> to <span class="literal1">clues</span>.</p>
<p class="indent">If the <span class="literal1">clues</span> list is empty after the loop, then you know that there are no correct digits at all in <span class="literal1">guess</span>:</p>
<p class="programs">26.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if len(clues) == 0:<br class="calibre7" />27.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 'Bagels'</p>
<p class="indent">In this case, line 27 returns the string <span class="literal1">'Bagels'</span> as the only clue.</p>
<h3 class="h2" id="calibre_link-586"><strong class="calibre2">The sort() List Method</strong></h3>
<p class="noindent">Lists have a method named <span class="literal1">sort()</span> that arranges the list items in alphabetical or numerical order. When the <span class="literal1">sort()</span> method is called, it doesn’t return a sorted list but rather sorts the list in place. This is just like how the <span class="literal1">shuffle()</span> method works.</p>
<p class="indent">You would never want to use <span class="literal1">return spam.sort()</span> because that would return the value <span class="literal1">None</span>. Instead you want a separate line, <span class="literal1">spam.sort()</span>, and then the line <span class="literal1">return spam</span>.</p>
<p class="indent">Enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong">spam = ['cat', 'dog', 'bat', 'anteater']</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">spam.sort()</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">spam</span><br class="calibre7" />['anteater', 'bat', 'cat', 'dog']<br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">spam = [9, 8, 3, 5.5, 5, 7, 1, 2.1, 0, 6]</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">spam.sort()</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">spam</span><br class="calibre7" />[0, 1, 2.1, 3, 5, 5.5, 6, 7, 8, 9]</p>
<p class="indent">When we sort a list of strings, the strings are returned in alphabetical order, but when we sort a list of numbers, the numbers are returned in numerical order.</p>
<p class="indent">On line 29, we use <span class="literal1">sort()</span> on <span class="literal1">clues</span>:</p>
<p class="programs">29.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clues.sort()</p>
<p class="indent">The reason you want to sort the <span class="literal1">clue</span> list alphabetically is to get rid of extra information that would help the player guess the secret number more easily. If <span class="literal1">clues</span> was <span class="literal1">['Pico', 'Fermi', 'Pico']</span>, that would tell the player that the center digit of the guess is in the correct position. Since the other two clues are both <span class="literal1">Pico</span>, the player would know that all they have to do to get the secret number is swap the first and third digits.</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-83"></span>If the clues are always sorted in alphabetical order, the player can’t be sure which number the <span class="literal1">Fermi</span> clue refers to. This makes the game harder and more fun to play.</p>
<h3 class="h2" id="calibre_link-587"><strong class="calibre2">The join() String Method</strong></h3>
<p class="noindent">The <span class="literal1">join()</span> string method returns a list of strings as a single string joined together.</p>
<p class="programs">30.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ' '.join(clues)</p>
<p class="indent">The string that the method is called on (on line 30, this is a single space, <span class="literal1">' '</span>) appears between each string in the list. To see an example, enter the following into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong">' '.join(['My', 'name', 'is', 'Zophie'])</span><br class="calibre7" />'My name is Zophie'<br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">', '.join(['Life', 'the Universe', 'and Everything'])</span><br class="calibre7" />'Life, the Universe, and Everything'</p>
<p class="indent">So the string that is returned on line 30 is each string in <span class="literal1">clue</span> combined with a single space between each string. The <span class="literal1">join()</span> string method is sort of like the opposite of the <span class="literal1">split()</span> string method. While <span class="literal1">split()</span> returns a list from a split-up string, <span class="literal1">join()</span> returns a string from a combined list.</p>
<h3 class="h2" id="calibre_link-82"><strong class="calibre2">Checking Whether a String Has Only Numbers</strong></h3>
<p class="noindent">The <span class="literal1">isOnlyDigits()</span> function helps determine whether the player entered a valid guess:</p>
<p class="programs">32. def isOnlyDigits(num):<br class="calibre7" />33.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Returns True if num is a string of only digits. Otherwise, returns<br class="calibre7" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;False.<br class="calibre7" />34.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if num == '':<br class="calibre7" />35.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return False</p>
<p class="indent">Line 34 first checks whether <span class="literal1">num</span> is the blank string and, if so, returns <span class="literal1">False</span>.</p>
<p class="indent">The <span class="literal1">for</span> loop then iterates over each character in the string <span class="literal1">num</span>:</p>
<p class="programs">37.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for i in num:<br class="calibre7" />38.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if i not in '0 1 2 3 4 5 6 7 8 9'.split():<br class="calibre7" />39.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return False<br class="calibre7" />40.<br class="calibre7" />41.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return True</p>
<p class="indent">The value of <span class="literal1">i</span> will have a single character on each iteration. Inside the <span class="literal1">for</span> block, the code checks whether <span class="literal1">i</span> exists in the list returned by <span class="literal1">'0 1 2 3 4 5 6 7 8 9'.split()</span>. (The return value from <span class="literal1">split()</span> is equivalent to <span class="literal1">['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']</span>.) <span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-209"></span>If <span class="literal1">i</span> doesn’t exist in that list, you know there’s a nondigit character in <span class="literal1">num</span>. In that case, line 39 returns <span class="literal1">False</span>.</p>
<p class="indent">But if the execution continues past the <span class="literal1">for</span> loop, then you know that every character in <span class="literal1">num</span> is a digit. In that case, line 41 returns <span class="literal1">True</span>.</p>
<h3 class="h2" id="calibre_link-588"><strong class="calibre2">Starting the Game</strong></h3>
<p class="noindent">After all of the function definitions, line 44 is the actual start of the program:</p>
<p class="programs">44. print('I am thinking of a %s-digit number. Try to guess what it is.' %<br class="calibre7" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(NUM_DIGITS))<br class="calibre7" />45. print('The clues I give are...')<br class="calibre7" />46. print('When I say:&nbsp;&nbsp;&nbsp;&nbsp;That means:')<br class="calibre7" />47. print('&nbsp;&nbsp;Bagels&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;None of the digits is correct.')<br class="calibre7" />48. print('&nbsp;&nbsp;Pico&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;One digit is correct but in the wrong position.')<br class="calibre7" />49. print('&nbsp;&nbsp;Fermi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;One digit is correct and in the right position.')</p>
<p class="indent">The <span class="literal1">print()</span> function calls tell the player the rules of the game and what the pico, fermi, and bagels clues mean. Line 44’s <span class="literal1">print()</span> call has <span class="literal1">% (NUM_DIGITS)</span> added to the end and <span class="literal1">%s</span> inside the string. This is a technique known as <em class="calibre6">string interpolation</em>.</p>
<h3 class="h2" id="calibre_link-589"><strong class="calibre2">String Interpolation</strong></h3>
<p class="noindent">String interpolation, also known as <em class="calibre6">string formatting</em>, is a coding shortcut. Normally, if you want to use the string values inside variables in another string, you have to use the <span class="literal1">+</span> concatenation operator:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong">name = 'Alice'</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">event = 'party'</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">location = 'the pool'</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">day = 'Saturday'</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">time = '6:00pm'</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">print('Hello, ' + name + '. Will you go to the ' + event + ' at ' +<br class="calibre7" />location + ' this ' + day + ' at ' + time + '?')</span><br class="calibre7" />Hello, Alice. Will you go to the party at the pool this Saturday at 6:00pm?</p>
<p class="indent">As you can see, it can be time-consuming to type a line that concatenates several strings. Instead, you can use string interpolation, which lets you put placeholders like <span class="literal1">%s</span> into the string. These placeholders are called <em class="calibre6">conversion specifiers</em>. Once you’ve put in the conversion specifiers, you can put all the variable names at the end of the string. Each <span class="literal1">%s</span> is replaced with a variable at the end of the line, in the order in which you entered the variable. For example, the following code does the same thing as the previous code:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong">name = 'Alice'</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">event = 'party'</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">location = 'the pool'</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">day = 'Saturday'</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">time = '6:00pm'</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">print('Hello, %s. Will you go to the %s at %s this %s at %s?' % (name,<br class="calibre7" />event, location, day, time))</span><br class="calibre7" />Hello, Alice. Will you go to the party at the pool this Saturday at 6:00pm?</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-206"></span>Notice that the first variable name is used for the first <span class="literal1">%s</span>, the second variable for the second <span class="literal1">%s</span>, and so on. You must have the same number of <span class="literal1">%s</span> conversion specifiers as you have variables.</p>
<p class="indent">Another benefit of using string interpolation instead of string concatenation is that interpolation works with any data type, not just strings. All values are automatically converted to the string data type. If you concatenated an integer to a string, you’d get this error:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong">spam = 42</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">print('Spam == ' + spam)</span><br class="calibre7" />Traceback (most recent call last):<br class="calibre7" />&nbsp;&nbsp;File "&lt;stdin&gt;", line 1, in &lt;module&gt;<br class="calibre7" />TypeError: Can't convert 'int' object to str implicitly</p>
<p class="indent">String concatenation can only combine two strings, but <span class="literal1">spam</span> is an integer. You would have to remember to put <span class="literal1">str(spam)</span> instead of <span class="literal1">spam</span>.</p>
<p class="indent">Now enter this into the interactive shell:</p>
<p class="programs">&gt;&gt;&gt; <span class="codestrong">spam = 42</span><br class="calibre7" />&gt;&gt;&gt; <span class="codestrong">print('Spam is %s' % (spam))</span><br class="calibre7" />Spam is 42</p>
<p class="indent">With string interpolation, this conversion to strings is done for you.</p>
<h3 class="h2" id="calibre_link-590"><strong class="calibre2">The Game Loop</strong></h3>
<p class="noindent">Line 51 is an infinite <span class="literal1">while</span> loop that has a condition of <span class="literal1">True</span>, so it will loop forever until a <span class="literal1">break</span> statement is executed:</p>
<p class="programs">51. while True:<br class="calibre7" />52.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;secretNum = getSecretNum()<br class="calibre7" />53.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('I have thought up a number. You have %s guesses to get it.' %<br class="calibre7" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(MAX_GUESS))<br class="calibre7" />54.<br class="calibre7" />55.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;guessesTaken = 1<br class="calibre7" />56.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while guessesTaken &lt;= MAX_GUESS:</p>
<p class="indent">Inside the infinite loop, you get a secret number from the <span class="literal1">getSecretNum()</span> function. This secret number is assigned to <span class="literal1">secretNum</span>. Remember, the value in <span class="literal1">secretNum</span> is a string, not an integer.</p>
<p class="indent">Line 53 tells the player how many digits are in the secret number by using string interpolation instead of string concatenation. Line 55 sets the variable <span class="literal1">guessesTaken</span> to <span class="literal1">1</span> to mark this is as the first guess. Then line 56 has a new <span class="literal1">while</span> loop that loops as long as the player has guesses left. In code, this is when <span class="literal1">guessesTaken</span> is less than or equal to <span class="literal1">MAX_GUESS</span>.</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-201"></span>Notice that the <span class="literal1">while</span> loop on line 56 is inside another <span class="literal1">while</span> loop that started on line 51. These loops inside loops are called <em class="calibre6">nested loops</em>. Any <span class="literal1">break</span> or <span class="literal1">continue</span> statements, such as the <span class="literal1">break</span> statement on line 66, will only break or continue out of the innermost loop, not any of the outer loops.</p>
<h4 class="h3" id="calibre_link-591"><em class="calibre10"><strong class="calibre2">Getting the Player’s Guess</strong></em></h4>
<p class="noindenta">The <span class="literal1">guess</span> variable holds the player’s guess returned from <span class="literal1">input()</span>. The code keeps looping and asking the player for a guess until they enter a valid guess:</p>
<p class="programs">57.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;guess = ''<br class="calibre7" />58.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while len(guess) != NUM_DIGITS or not isOnlyDigits(guess):<br class="calibre7" />59.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('Guess #%s: ' % (guessesTaken))<br class="calibre7" />60.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;guess = input()</p>
<p class="indent">A valid guess has only digits and the same number of digits as the secret number. The <span class="literal1">while</span> loop that starts on line 58 checks for the validity of the guess.</p>
<p class="indent">The <span class="literal1">guess</span> variable is set to the blank string on line 57, so the <span class="literal1">while</span> loop’s condition on line 58 is <span class="literal1">False</span> the first time it is checked, ensuring the execution enters the loop starting on line 59.</p>
<h4 class="h3" id="calibre_link-592"><em class="calibre10"><strong class="calibre2">Getting the Clues for the Player’s Guess</strong></em></h4>
<p class="noindenta">After execution gets past the <span class="literal1">while</span> loop that started on line 58, <span class="literal1">guess</span> contains a valid guess. Now the program passes <span class="literal1">guess</span> and <span class="literal1">secretNum</span> to the <span class="literal1">getClues()</span> function:</p>
<p class="programs">62.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(getClues(guess, secretNum))<br class="calibre7" />63.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;guessesTaken += 1</p>
<p class="indent">It returns a string of the clues, which are displayed to the player on line 62. Line 63 increments <span class="literal1">guessesTaken</span> using the augmented assignment operator for addition.</p>
<h4 class="h3" id="calibre_link-593"><em class="calibre10"><strong class="calibre2">Checking Whether the Player Won or Lost</strong></em></h4>
<p class="noindenta">Now we figure out if the player won or lost the game:</p>
<p class="programs">65.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if guess == secretNum:<br class="calibre7" />66.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br class="calibre7" />67.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if guessesTaken &gt; MAX_GUESS:<br class="calibre7" />68.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('You ran out of guesses. The answer was %s.' %<br class="calibre7" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(secretNum))</p>
<p class="indent">If <span class="literal1">guess</span> is the same value as <span class="literal1">secretNum</span>, the player has correctly guessed the secret number, and line 66 breaks out of the <span class="literal1">while</span> loop that was started on line 56. If not, then execution continues to line 67, where the program checks whether the player ran out of guesses.</p>
<p class="indent"><span {http://www.idpf.org/2007/ops}type="pagebreak" id="calibre_link-204"></span>If the player still has more guesses, execution jumps back to the <span class="literal1">while</span> loop on line 56, where it lets the player have another guess. If the player runs out of guesses (or the program breaks out of the loop with the <span class="literal1">break</span> statement on line 66), execution proceeds past the loop and to line 70.</p>
<h4 class="h3" id="calibre_link-594"><em class="calibre10"><strong class="calibre2">Asking the Player to Play Again</strong></em></h4>
<p class="noindenta">Line 70 asks the player whether they want to play again:</p>
<p class="programs">70.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print('Do you want to play again? (yes or no)')<br class="calibre7" />71.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not input().lower().startswith('y'):<br class="calibre7" />72.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break</p>
<p class="indent">The player’s response is returned by <span class="literal1">input()</span>, has the <span class="literal1">lower()</span> method called on it, and then the <span class="literal1">startswith()</span> method called on that to check if the player’s response begins with a <span class="literal1">y</span>. If it doesn’t, the program breaks out of the <span class="literal1">while</span> loop that started on line 51. Since there’s no more code after this loop, the program terminates.</p>
<p class="indent">If the response does begin with <span class="literal1">y</span>, the program does not execute the <span class="literal1">break</span> statement and execution jumps back to line 51. The program then generates a new secret number so the player can play a new game.</p>
<h3 class="h2" id="calibre_link-595"><strong class="calibre2">Summary</strong></h3>
<p class="noindent">Bagels is a simple game to program but can be difficult to win. But if you keep playing, you’ll eventually discover better ways to guess using the clues the game gives you. This is much like how you’ll get better at programming the more you keep at it.</p>
<p class="indent">This chapter introduced a few new functions and methods&mdash;<span class="literal1">shuffle()</span>, <span class="literal1">sort()</span>, and <span class="literal1">join()</span>&mdash;along with a couple of handy shortcuts. Augmented assignment operators require less typing when you want to change a variable’s relative value; for example, <span class="literal1">spam = spam + 1</span> can be shortened to <span class="literal1">spam += 1</span>. With string interpolation, you can make your code much more readable by placing <span class="literal1">%s</span> (called a <em class="calibre6">conversion specifier</em>) inside the string instead of using many string concatenation operations.</p>
<p class="indent">In <a href="#calibre_link-72" class="calibre4">Chapter 12</a>, we won’t be doing any programming, but the concepts&mdash;Cartesian coordinates and negative numbers&mdash;will be necessary for the games in the later chapters of the book. These math concepts are used not only in the Sonar Treasure Hunt, Reversegam, and Dodger games we will be making but also in many other games. Even if you already know about these concepts, give <a href="#calibre_link-72" class="calibre4">Chapter 12</a> a brief read to refresh yourself.</p>
</div>
